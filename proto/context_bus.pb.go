// Code generated by protoc-gen-go. DO NOT EDIT.
// source: context_bus.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:

	context_bus.proto

It has these top-level messages:

	ConditionMessage
	ConditionLogic
	ConditionNode
	ConditionTree
	PrerequisiteMessage
	PrerequisiteEvent
	PrerequisiteLogic
	PrerequisiteNode
	PrerequisiteTree
	PrerequisiteSnapshot
	PrerequisiteSnapshots
	FaultDelayParam
	TrafficBalanceParam
	TrafficRoutingParam
	ReactionConfigure
	Path
	AttributeConfigure
	TimestampConfigure
	StackTraceConfigure
	LoggingConfigure
	TracingConfigure
	MetricsConfigure
	ObservationConfigure
	Configure
	CPUProfile
	MemProfile
	NetProfile
	HardwareProfile
	LanguageGo
	LanguageJava
	LanguageProfile
	EnvironmentalProfile
	EventWhen
	AttributeValue
	Attributes
	CodeBaseInfo
	EventWhere
	EventRecorder
	EventMessage
	LibrariesMessage
	EventWhat
	EventRepresentation
	ParentChildPointers
	SpanMetadata
	EventMetadata
	EventData
	Record
	PrometheusOpts
	PrometheusHistogramOpts
	PrometheusSummaryObjective
	PrometheusSummaryOpts
	PrometheusConfiguration
	LatencyMetric
	PerfMetric
	Payload
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ConditionOperator int32

const (
	ConditionOperator_ConditionOperator_ ConditionOperator = 0
	ConditionOperator_LT                 ConditionOperator = 1
	ConditionOperator_GT                 ConditionOperator = 2
	ConditionOperator_LE                 ConditionOperator = 3
	ConditionOperator_GE                 ConditionOperator = 4
	ConditionOperator_EQ                 ConditionOperator = 5
	ConditionOperator_NE                 ConditionOperator = 6
)

var ConditionOperator_name = map[int32]string{
	0: "ConditionOperator_",
	1: "LT",
	2: "GT",
	3: "LE",
	4: "GE",
	5: "EQ",
	6: "NE",
}
var ConditionOperator_value = map[string]int32{
	"ConditionOperator_": 0,
	"LT":                 1,
	"GT":                 2,
	"LE":                 3,
	"GE":                 4,
	"EQ":                 5,
	"NE":                 6,
}

func (x ConditionOperator) String() string {
	return proto1.EnumName(ConditionOperator_name, int32(x))
}
func (ConditionOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConditionType int32

const (
	ConditionType_ConditionType_ ConditionType = 0
	ConditionType_NumOfInvok     ConditionType = 1
	ConditionType_Latency        ConditionType = 2
)

var ConditionType_name = map[int32]string{
	0: "ConditionType_",
	1: "NumOfInvok",
	2: "Latency",
}
var ConditionType_value = map[string]int32{
	"ConditionType_": 0,
	"NumOfInvok":     1,
	"Latency":        2,
}

func (x ConditionType) String() string {
	return proto1.EnumName(ConditionType_name, int32(x))
}
func (ConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ConditionNodeType int32

const (
	ConditionNodeType_ConditionNodeType_ ConditionNodeType = 0
	ConditionNodeType_ConditionMessage_  ConditionNodeType = 1
	ConditionNodeType_ConditionLogic_    ConditionNodeType = 2
)

var ConditionNodeType_name = map[int32]string{
	0: "ConditionNodeType_",
	1: "ConditionMessage_",
	2: "ConditionLogic_",
}
var ConditionNodeType_value = map[string]int32{
	"ConditionNodeType_": 0,
	"ConditionMessage_":  1,
	"ConditionLogic_":    2,
}

func (x ConditionNodeType) String() string {
	return proto1.EnumName(ConditionNodeType_name, int32(x))
}
func (ConditionNodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LogicType int32

const (
	LogicType_LogicType_ LogicType = 0
	LogicType_And_       LogicType = 1
	LogicType_Or_        LogicType = 2
)

var LogicType_name = map[int32]string{
	0: "LogicType_",
	1: "And_",
	2: "Or_",
}
var LogicType_value = map[string]int32{
	"LogicType_": 0,
	"And_":       1,
	"Or_":        2,
}

func (x LogicType) String() string {
	return proto1.EnumName(LogicType_name, int32(x))
}
func (LogicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PrerequisiteNodeType int32

const (
	PrerequisiteNodeType_PrerequisiteNodeType_         PrerequisiteNodeType = 0
	PrerequisiteNodeType_PrerequisiteMessage_          PrerequisiteNodeType = 1
	PrerequisiteNodeType_PrerequisiteLogic_            PrerequisiteNodeType = 2
	PrerequisiteNodeType_PrerequisiteAfterObservation_ PrerequisiteNodeType = 3
)

var PrerequisiteNodeType_name = map[int32]string{
	0: "PrerequisiteNodeType_",
	1: "PrerequisiteMessage_",
	2: "PrerequisiteLogic_",
	3: "PrerequisiteAfterObservation_",
}
var PrerequisiteNodeType_value = map[string]int32{
	"PrerequisiteNodeType_":         0,
	"PrerequisiteMessage_":          1,
	"PrerequisiteLogic_":            2,
	"PrerequisiteAfterObservation_": 3,
}

func (x PrerequisiteNodeType) String() string {
	return proto1.EnumName(PrerequisiteNodeType_name, int32(x))
}
func (PrerequisiteNodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReactionType int32

const (
	ReactionType_ReactionType_ ReactionType = 0
	// fault injection
	ReactionType_ReactionFaultCrash ReactionType = 1
	ReactionType_ReactionFaultDelay ReactionType = 2
	ReactionType_ReactionFaultDrop  ReactionType = 3
	// traffic (e.g., load-balancing, traffic shaping)
	ReactionType_ReactionTrafficBalance ReactionType = 101
	ReactionType_ReactionTrafficRouting ReactionType = 102
	// Notification & alert
	ReactionType_ReactionPrintLog ReactionType = 1001
	ReactionType_ReactionEmail    ReactionType = 1002
)

var ReactionType_name = map[int32]string{
	0:    "ReactionType_",
	1:    "ReactionFaultCrash",
	2:    "ReactionFaultDelay",
	3:    "ReactionFaultDrop",
	101:  "ReactionTrafficBalance",
	102:  "ReactionTrafficRouting",
	1001: "ReactionPrintLog",
	1002: "ReactionEmail",
}
var ReactionType_value = map[string]int32{
	"ReactionType_":          0,
	"ReactionFaultCrash":     1,
	"ReactionFaultDelay":     2,
	"ReactionFaultDrop":      3,
	"ReactionTrafficBalance": 101,
	"ReactionTrafficRouting": 102,
	"ReactionPrintLog":       1001,
	"ReactionEmail":          1002,
}

func (x ReactionType) String() string {
	return proto1.EnumName(ReactionType_name, int32(x))
}
func (ReactionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PathType int32

const (
	PathType_PathType_   PathType = 0
	PathType_Application PathType = 1
	PathType_Library     PathType = 2
)

var PathType_name = map[int32]string{
	0: "PathType_",
	1: "Application",
	2: "Library",
}
var PathType_value = map[string]int32{
	"PathType_":   0,
	"Application": 1,
	"Library":     2,
}

func (x PathType) String() string {
	return proto1.EnumName(PathType_name, int32(x))
}
func (PathType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LogOutType int32

const (
	LogOutType_LogOutType_ LogOutType = 0
	LogOutType_Stdout      LogOutType = 1
	LogOutType_Stderr      LogOutType = 2
	LogOutType_File        LogOutType = 3
)

var LogOutType_name = map[int32]string{
	0: "LogOutType_",
	1: "Stdout",
	2: "Stderr",
	3: "File",
}
var LogOutType_value = map[string]int32{
	"LogOutType_": 0,
	"Stdout":      1,
	"Stderr":      2,
	"File":        3,
}

func (x LogOutType) String() string {
	return proto1.EnumName(LogOutType_name, int32(x))
}
func (LogOutType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type MetricType int32

const (
	MetricType_MetricType_ MetricType = 0
	MetricType_Counter     MetricType = 1
	MetricType_Gauge       MetricType = 2
	MetricType_Histogram   MetricType = 3
	MetricType_Summary     MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "MetricType_",
	1: "Counter",
	2: "Gauge",
	3: "Histogram",
	4: "Summary",
}
var MetricType_value = map[string]int32{
	"MetricType_": 0,
	"Counter":     1,
	"Gauge":       2,
	"Histogram":   3,
	"Summary":     4,
}

func (x MetricType) String() string {
	return proto1.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ObservationType int32

const (
	ObservationType_ObservationType_  ObservationType = 0
	ObservationType_ObservationSingle ObservationType = 1
	ObservationType_ObservationStart  ObservationType = 2
	ObservationType_ObservationInter  ObservationType = 3
	ObservationType_ObservationEnd    ObservationType = 4
)

var ObservationType_name = map[int32]string{
	0: "ObservationType_",
	1: "ObservationSingle",
	2: "ObservationStart",
	3: "ObservationInter",
	4: "ObservationEnd",
}
var ObservationType_value = map[string]int32{
	"ObservationType_":  0,
	"ObservationSingle": 1,
	"ObservationStart":  2,
	"ObservationInter":  3,
	"ObservationEnd":    4,
}

func (x ObservationType) String() string {
	return proto1.EnumName(ObservationType_name, int32(x))
}
func (ObservationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type LanguageType int32

const (
	LanguageType_LanguageType_ LanguageType = 0
	LanguageType_Other         LanguageType = 1
	LanguageType_Golang        LanguageType = 2
	LanguageType_Java          LanguageType = 3
)

var LanguageType_name = map[int32]string{
	0: "LanguageType_",
	1: "Other",
	2: "Golang",
	3: "Java",
}
var LanguageType_value = map[string]int32{
	"LanguageType_": 0,
	"Other":         1,
	"Golang":        2,
	"Java":          3,
}

func (x LanguageType) String() string {
	return proto1.EnumName(LanguageType_name, int32(x))
}
func (LanguageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type AttributeValueType int32

const (
	AttributeValueType_AttributeValueType_ AttributeValueType = 0
	AttributeValueType_AttributeValueStr   AttributeValueType = 1
	AttributeValueType_AttributeValueAttr  AttributeValueType = 2
)

var AttributeValueType_name = map[int32]string{
	0: "AttributeValueType_",
	1: "AttributeValueStr",
	2: "AttributeValueAttr",
}
var AttributeValueType_value = map[string]int32{
	"AttributeValueType_": 0,
	"AttributeValueStr":   1,
	"AttributeValueAttr":  2,
}

func (x AttributeValueType) String() string {
	return proto1.EnumName(AttributeValueType_name, int32(x))
}
func (AttributeValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type EventRecorderType int32

const (
	EventRecorderType_EventRecorderType_          EventRecorderType = 0
	EventRecorderType_EventRecorderServiceHandler EventRecorderType = 1
	EventRecorderType_EventRecorderFunction       EventRecorderType = 2
	EventRecorderType_EventRecorderThirdParty     EventRecorderType = 3
)

var EventRecorderType_name = map[int32]string{
	0: "EventRecorderType_",
	1: "EventRecorderServiceHandler",
	2: "EventRecorderFunction",
	3: "EventRecorderThirdParty",
}
var EventRecorderType_value = map[string]int32{
	"EventRecorderType_":          0,
	"EventRecorderServiceHandler": 1,
	"EventRecorderFunction":       2,
	"EventRecorderThirdParty":     3,
}

func (x EventRecorderType) String() string {
	return proto1.EnumName(EventRecorderType_name, int32(x))
}
func (EventRecorderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// ******************* from 3mb WIP
type MessageType int32

const (
	MessageType_MessageType_     MessageType = 0
	MessageType_Message_Request  MessageType = 1
	MessageType_Message_Response MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MessageType_",
	1: "Message_Request",
	2: "Message_Response",
}
var MessageType_value = map[string]int32{
	"MessageType_":     0,
	"Message_Request":  1,
	"Message_Response": 2,
}

func (x MessageType) String() string {
	return proto1.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ActionType int32

const (
	ActionType_ActionType_   ActionType = 0
	ActionType_ActionSend    ActionType = 1
	ActionType_ActionReceive ActionType = 2
)

var ActionType_name = map[int32]string{
	0: "ActionType_",
	1: "ActionSend",
	2: "ActionReceive",
}
var ActionType_value = map[string]int32{
	"ActionType_":   0,
	"ActionSend":    1,
	"ActionReceive": 2,
}

func (x ActionType) String() string {
	return proto1.EnumName(ActionType_name, int32(x))
}
func (ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ConditionMessage struct {
	Type  ConditionType     `protobuf:"varint,1,opt,name=type,enum=context_bus.ConditionType" json:"type,omitempty"`
	Op    ConditionOperator `protobuf:"varint,2,opt,name=op,enum=context_bus.ConditionOperator" json:"op,omitempty"`
	Value int64             `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *ConditionMessage) Reset()                    { *m = ConditionMessage{} }
func (m *ConditionMessage) String() string            { return proto1.CompactTextString(m) }
func (*ConditionMessage) ProtoMessage()               {}
func (*ConditionMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConditionMessage) GetType() ConditionType {
	if m != nil {
		return m.Type
	}
	return ConditionType_ConditionType_
}

func (m *ConditionMessage) GetOp() ConditionOperator {
	if m != nil {
		return m.Op
	}
	return ConditionOperator_ConditionOperator_
}

func (m *ConditionMessage) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ConditionLogic struct {
	Type   LogicType `protobuf:"varint,1,opt,name=type,enum=context_bus.LogicType" json:"type,omitempty"`
	Parent int64     `protobuf:"varint,100,opt,name=parent" json:"parent,omitempty"`
	List   []int64   `protobuf:"varint,101,rep,packed,name=list" json:"list,omitempty"`
}

func (m *ConditionLogic) Reset()                    { *m = ConditionLogic{} }
func (m *ConditionLogic) String() string            { return proto1.CompactTextString(m) }
func (*ConditionLogic) ProtoMessage()               {}
func (*ConditionLogic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConditionLogic) GetType() LogicType {
	if m != nil {
		return m.Type
	}
	return LogicType_LogicType_
}

func (m *ConditionLogic) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *ConditionLogic) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type ConditionNode struct {
	Type    ConditionNodeType `protobuf:"varint,2,opt,name=type,enum=context_bus.ConditionNodeType" json:"type,omitempty"`
	Message *ConditionMessage `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Logic   *ConditionLogic   `protobuf:"bytes,4,opt,name=logic" json:"logic,omitempty"`
}

func (m *ConditionNode) Reset()                    { *m = ConditionNode{} }
func (m *ConditionNode) String() string            { return proto1.CompactTextString(m) }
func (*ConditionNode) ProtoMessage()               {}
func (*ConditionNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConditionNode) GetType() ConditionNodeType {
	if m != nil {
		return m.Type
	}
	return ConditionNodeType_ConditionNodeType_
}

func (m *ConditionNode) GetMessage() *ConditionMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ConditionNode) GetLogic() *ConditionLogic {
	if m != nil {
		return m.Logic
	}
	return nil
}

type ConditionTree struct {
	Nodes   []*ConditionNode `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	LeafIDs []int64          `protobuf:"varint,2,rep,packed,name=leafIDs" json:"leafIDs,omitempty"`
}

func (m *ConditionTree) Reset()                    { *m = ConditionTree{} }
func (m *ConditionTree) String() string            { return proto1.CompactTextString(m) }
func (*ConditionTree) ProtoMessage()               {}
func (*ConditionTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConditionTree) GetNodes() []*ConditionNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ConditionTree) GetLeafIDs() []int64 {
	if m != nil {
		return m.LeafIDs
	}
	return nil
}

type PrerequisiteMessage struct {
	Name     string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CondTree *ConditionTree `protobuf:"bytes,2,opt,name=cond_tree,json=condTree" json:"cond_tree,omitempty"`
	Parent   int64          `protobuf:"varint,100,opt,name=parent" json:"parent,omitempty"`
}

func (m *PrerequisiteMessage) Reset()                    { *m = PrerequisiteMessage{} }
func (m *PrerequisiteMessage) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteMessage) ProtoMessage()               {}
func (*PrerequisiteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PrerequisiteMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrerequisiteMessage) GetCondTree() *ConditionTree {
	if m != nil {
		return m.CondTree
	}
	return nil
}

func (m *PrerequisiteMessage) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

type PrerequisiteEvent struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Latency int64  `protobuf:"varint,2,opt,name=latency" json:"latency,omitempty"`
}

func (m *PrerequisiteEvent) Reset()                    { *m = PrerequisiteEvent{} }
func (m *PrerequisiteEvent) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteEvent) ProtoMessage()               {}
func (*PrerequisiteEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PrerequisiteEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrerequisiteEvent) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

type PrerequisiteLogic struct {
	Type   LogicType `protobuf:"varint,1,opt,name=type,enum=context_bus.LogicType" json:"type,omitempty"`
	Parent int64     `protobuf:"varint,100,opt,name=parent" json:"parent,omitempty"`
	List   []int64   `protobuf:"varint,101,rep,packed,name=list" json:"list,omitempty"`
}

func (m *PrerequisiteLogic) Reset()                    { *m = PrerequisiteLogic{} }
func (m *PrerequisiteLogic) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteLogic) ProtoMessage()               {}
func (*PrerequisiteLogic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PrerequisiteLogic) GetType() LogicType {
	if m != nil {
		return m.Type
	}
	return LogicType_LogicType_
}

func (m *PrerequisiteLogic) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *PrerequisiteLogic) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type PrerequisiteNode struct {
	Id        int64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type      PrerequisiteNodeType `protobuf:"varint,2,opt,name=type,enum=context_bus.PrerequisiteNodeType" json:"type,omitempty"`
	Message   *PrerequisiteMessage `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	PrevEvent *PrerequisiteEvent   `protobuf:"bytes,4,opt,name=prevEvent" json:"prevEvent,omitempty"`
	Logic     *PrerequisiteLogic   `protobuf:"bytes,5,opt,name=logic" json:"logic,omitempty"`
}

func (m *PrerequisiteNode) Reset()                    { *m = PrerequisiteNode{} }
func (m *PrerequisiteNode) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteNode) ProtoMessage()               {}
func (*PrerequisiteNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PrerequisiteNode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrerequisiteNode) GetType() PrerequisiteNodeType {
	if m != nil {
		return m.Type
	}
	return PrerequisiteNodeType_PrerequisiteNodeType_
}

func (m *PrerequisiteNode) GetMessage() *PrerequisiteMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PrerequisiteNode) GetPrevEvent() *PrerequisiteEvent {
	if m != nil {
		return m.PrevEvent
	}
	return nil
}

func (m *PrerequisiteNode) GetLogic() *PrerequisiteLogic {
	if m != nil {
		return m.Logic
	}
	return nil
}

// prerequisite tree
type PrerequisiteTree struct {
	Nodes   []*PrerequisiteNode `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	LeafIDs []int64             `protobuf:"varint,2,rep,packed,name=leafIDs" json:"leafIDs,omitempty"`
}

func (m *PrerequisiteTree) Reset()                    { *m = PrerequisiteTree{} }
func (m *PrerequisiteTree) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteTree) ProtoMessage()               {}
func (*PrerequisiteTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PrerequisiteTree) GetNodes() []*PrerequisiteNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *PrerequisiteTree) GetLeafIDs() []int64 {
	if m != nil {
		return m.LeafIDs
	}
	return nil
}

type PrerequisiteSnapshot struct {
	Value []int64 `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
	Acc   bool    `protobuf:"varint,2,opt,name=acc" json:"acc,omitempty"`
}

func (m *PrerequisiteSnapshot) Reset()                    { *m = PrerequisiteSnapshot{} }
func (m *PrerequisiteSnapshot) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteSnapshot) ProtoMessage()               {}
func (*PrerequisiteSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PrerequisiteSnapshot) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PrerequisiteSnapshot) GetAcc() bool {
	if m != nil {
		return m.Acc
	}
	return false
}

type PrerequisiteSnapshots struct {
	Snapshots map[string]*PrerequisiteSnapshot `protobuf:"bytes,1,rep,name=snapshots" json:"snapshots,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PrerequisiteSnapshots) Reset()                    { *m = PrerequisiteSnapshots{} }
func (m *PrerequisiteSnapshots) String() string            { return proto1.CompactTextString(m) }
func (*PrerequisiteSnapshots) ProtoMessage()               {}
func (*PrerequisiteSnapshots) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PrerequisiteSnapshots) GetSnapshots() map[string]*PrerequisiteSnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type FaultDelayParam struct {
	Ms int64 `protobuf:"varint,1,opt,name=ms" json:"ms,omitempty"`
}

func (m *FaultDelayParam) Reset()                    { *m = FaultDelayParam{} }
func (m *FaultDelayParam) String() string            { return proto1.CompactTextString(m) }
func (*FaultDelayParam) ProtoMessage()               {}
func (*FaultDelayParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FaultDelayParam) GetMs() int64 {
	if m != nil {
		return m.Ms
	}
	return 0
}

type TrafficBalanceParam struct {
}

func (m *TrafficBalanceParam) Reset()                    { *m = TrafficBalanceParam{} }
func (m *TrafficBalanceParam) String() string            { return proto1.CompactTextString(m) }
func (*TrafficBalanceParam) ProtoMessage()               {}
func (*TrafficBalanceParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type TrafficRoutingParam struct {
}

func (m *TrafficRoutingParam) Reset()                    { *m = TrafficRoutingParam{} }
func (m *TrafficRoutingParam) String() string            { return proto1.CompactTextString(m) }
func (*TrafficRoutingParam) ProtoMessage()               {}
func (*TrafficRoutingParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ReactionConfigure struct {
	Type ReactionType `protobuf:"varint,1,opt,name=type,enum=context_bus.ReactionType" json:"type,omitempty"`
	// Types that are valid to be assigned to Params:
	//	*ReactionConfigure_FaultDelay
	//	*ReactionConfigure_TrafficBalance
	//	*ReactionConfigure_TrafficRouting
	Params  isReactionConfigure_Params `protobuf_oneof:"params"`
	PreTree *PrerequisiteTree          `protobuf:"bytes,3,opt,name=pre_tree,json=preTree" json:"pre_tree,omitempty"`
}

func (m *ReactionConfigure) Reset()                    { *m = ReactionConfigure{} }
func (m *ReactionConfigure) String() string            { return proto1.CompactTextString(m) }
func (*ReactionConfigure) ProtoMessage()               {}
func (*ReactionConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isReactionConfigure_Params interface{ isReactionConfigure_Params() }

type ReactionConfigure_FaultDelay struct {
	FaultDelay *FaultDelayParam `protobuf:"bytes,2002,opt,name=FaultDelay,oneof"`
}
type ReactionConfigure_TrafficBalance struct {
	TrafficBalance *TrafficBalanceParam `protobuf:"bytes,2101,opt,name=TrafficBalance,oneof"`
}
type ReactionConfigure_TrafficRouting struct {
	TrafficRouting *TrafficRoutingParam `protobuf:"bytes,2102,opt,name=TrafficRouting,oneof"`
}

func (*ReactionConfigure_FaultDelay) isReactionConfigure_Params()     {}
func (*ReactionConfigure_TrafficBalance) isReactionConfigure_Params() {}
func (*ReactionConfigure_TrafficRouting) isReactionConfigure_Params() {}

func (m *ReactionConfigure) GetParams() isReactionConfigure_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ReactionConfigure) GetType() ReactionType {
	if m != nil {
		return m.Type
	}
	return ReactionType_ReactionType_
}

func (m *ReactionConfigure) GetFaultDelay() *FaultDelayParam {
	if x, ok := m.GetParams().(*ReactionConfigure_FaultDelay); ok {
		return x.FaultDelay
	}
	return nil
}

func (m *ReactionConfigure) GetTrafficBalance() *TrafficBalanceParam {
	if x, ok := m.GetParams().(*ReactionConfigure_TrafficBalance); ok {
		return x.TrafficBalance
	}
	return nil
}

func (m *ReactionConfigure) GetTrafficRouting() *TrafficRoutingParam {
	if x, ok := m.GetParams().(*ReactionConfigure_TrafficRouting); ok {
		return x.TrafficRouting
	}
	return nil
}

func (m *ReactionConfigure) GetPreTree() *PrerequisiteTree {
	if m != nil {
		return m.PreTree
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReactionConfigure) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _ReactionConfigure_OneofMarshaler, _ReactionConfigure_OneofUnmarshaler, _ReactionConfigure_OneofSizer, []interface{}{
		(*ReactionConfigure_FaultDelay)(nil),
		(*ReactionConfigure_TrafficBalance)(nil),
		(*ReactionConfigure_TrafficRouting)(nil),
	}
}

func _ReactionConfigure_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*ReactionConfigure)
	// params
	switch x := m.Params.(type) {
	case *ReactionConfigure_FaultDelay:
		b.EncodeVarint(2002<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.FaultDelay); err != nil {
			return err
		}
	case *ReactionConfigure_TrafficBalance:
		b.EncodeVarint(2101<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.TrafficBalance); err != nil {
			return err
		}
	case *ReactionConfigure_TrafficRouting:
		b.EncodeVarint(2102<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.TrafficRouting); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReactionConfigure.Params has unexpected type %T", x)
	}
	return nil
}

func _ReactionConfigure_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*ReactionConfigure)
	switch tag {
	case 2002: // params.FaultDelay
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(FaultDelayParam)
		err := b.DecodeMessage(msg)
		m.Params = &ReactionConfigure_FaultDelay{msg}
		return true, err
	case 2101: // params.TrafficBalance
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(TrafficBalanceParam)
		err := b.DecodeMessage(msg)
		m.Params = &ReactionConfigure_TrafficBalance{msg}
		return true, err
	case 2102: // params.TrafficRouting
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(TrafficRoutingParam)
		err := b.DecodeMessage(msg)
		m.Params = &ReactionConfigure_TrafficRouting{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReactionConfigure_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*ReactionConfigure)
	// params
	switch x := m.Params.(type) {
	case *ReactionConfigure_FaultDelay:
		s := proto1.Size(x.FaultDelay)
		n += proto1.SizeVarint(2002<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *ReactionConfigure_TrafficBalance:
		s := proto1.Size(x.TrafficBalance)
		n += proto1.SizeVarint(2101<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *ReactionConfigure_TrafficRouting:
		s := proto1.Size(x.TrafficRouting)
		n += proto1.SizeVarint(2102<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Path struct {
	Type PathType `protobuf:"varint,1,opt,name=type,enum=context_bus.PathType" json:"type,omitempty"`
	Path []string `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto1.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Path) GetType() PathType {
	if m != nil {
		return m.Type
	}
	return PathType_PathType_
}

func (m *Path) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type AttributeConfigure struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path *Path  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *AttributeConfigure) Reset()                    { *m = AttributeConfigure{} }
func (m *AttributeConfigure) String() string            { return proto1.CompactTextString(m) }
func (*AttributeConfigure) ProtoMessage()               {}
func (*AttributeConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AttributeConfigure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AttributeConfigure) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type TimestampConfigure struct {
	Format string `protobuf:"bytes,1,opt,name=format" json:"format,omitempty"`
}

func (m *TimestampConfigure) Reset()                    { *m = TimestampConfigure{} }
func (m *TimestampConfigure) String() string            { return proto1.CompactTextString(m) }
func (*TimestampConfigure) ProtoMessage()               {}
func (*TimestampConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TimestampConfigure) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type StackTraceConfigure struct {
	Switch bool `protobuf:"varint,1,opt,name=switch" json:"switch,omitempty"`
}

func (m *StackTraceConfigure) Reset()                    { *m = StackTraceConfigure{} }
func (m *StackTraceConfigure) String() string            { return proto1.CompactTextString(m) }
func (*StackTraceConfigure) ProtoMessage()               {}
func (*StackTraceConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *StackTraceConfigure) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

type LoggingConfigure struct {
	Timestamp  *TimestampConfigure   `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Stacktrace *StackTraceConfigure  `protobuf:"bytes,2,opt,name=stacktrace" json:"stacktrace,omitempty"`
	Attrs      []*AttributeConfigure `protobuf:"bytes,3,rep,name=attrs" json:"attrs,omitempty"`
	Out        LogOutType            `protobuf:"varint,4,opt,name=out,enum=context_bus.LogOutType" json:"out,omitempty"`
}

func (m *LoggingConfigure) Reset()                    { *m = LoggingConfigure{} }
func (m *LoggingConfigure) String() string            { return proto1.CompactTextString(m) }
func (*LoggingConfigure) ProtoMessage()               {}
func (*LoggingConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LoggingConfigure) GetTimestamp() *TimestampConfigure {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LoggingConfigure) GetStacktrace() *StackTraceConfigure {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

func (m *LoggingConfigure) GetAttrs() []*AttributeConfigure {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *LoggingConfigure) GetOut() LogOutType {
	if m != nil {
		return m.Out
	}
	return LogOutType_LogOutType_
}

type TracingConfigure struct {
	Start         bool                  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End           bool                  `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	SpanName      string                `protobuf:"bytes,3,opt,name=span_name,json=spanName" json:"span_name,omitempty"`
	PrevEventName string                `protobuf:"bytes,4,opt,name=prev_event_name,json=prevEventName" json:"prev_event_name,omitempty"`
	Attrs         []*AttributeConfigure `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
	Stacktrace    *StackTraceConfigure  `protobuf:"bytes,6,opt,name=stacktrace" json:"stacktrace,omitempty"`
	ParentName    string                `protobuf:"bytes,11,opt,name=parent_name,json=parentName" json:"parent_name,omitempty"`
}

func (m *TracingConfigure) Reset()                    { *m = TracingConfigure{} }
func (m *TracingConfigure) String() string            { return proto1.CompactTextString(m) }
func (*TracingConfigure) ProtoMessage()               {}
func (*TracingConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TracingConfigure) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *TracingConfigure) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

func (m *TracingConfigure) GetSpanName() string {
	if m != nil {
		return m.SpanName
	}
	return ""
}

func (m *TracingConfigure) GetPrevEventName() string {
	if m != nil {
		return m.PrevEventName
	}
	return ""
}

func (m *TracingConfigure) GetAttrs() []*AttributeConfigure {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *TracingConfigure) GetStacktrace() *StackTraceConfigure {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

func (m *TracingConfigure) GetParentName() string {
	if m != nil {
		return m.ParentName
	}
	return ""
}

type MetricsConfigure struct {
	Type     MetricType            `protobuf:"varint,1,opt,name=type,enum=context_bus.MetricType" json:"type,omitempty"`
	OptsId   int64                 `protobuf:"varint,2,opt,name=opts_id,json=optsId" json:"opts_id,omitempty"`
	Name     string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PrevName string                `protobuf:"bytes,4,opt,name=prev_name,json=prevName" json:"prev_name,omitempty"`
	Attrs    []*AttributeConfigure `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
}

func (m *MetricsConfigure) Reset()                    { *m = MetricsConfigure{} }
func (m *MetricsConfigure) String() string            { return proto1.CompactTextString(m) }
func (*MetricsConfigure) ProtoMessage()               {}
func (*MetricsConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MetricsConfigure) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return MetricType_MetricType_
}

func (m *MetricsConfigure) GetOptsId() int64 {
	if m != nil {
		return m.OptsId
	}
	return 0
}

func (m *MetricsConfigure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsConfigure) GetPrevName() string {
	if m != nil {
		return m.PrevName
	}
	return ""
}

func (m *MetricsConfigure) GetAttrs() []*AttributeConfigure {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type ObservationConfigure struct {
	Type    ObservationType     `protobuf:"varint,1,opt,name=type,enum=context_bus.ObservationType" json:"type,omitempty"`
	Logging *LoggingConfigure   `protobuf:"bytes,2,opt,name=logging" json:"logging,omitempty"`
	Tracing *TracingConfigure   `protobuf:"bytes,3,opt,name=tracing" json:"tracing,omitempty"`
	Metrics []*MetricsConfigure `protobuf:"bytes,4,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *ObservationConfigure) Reset()                    { *m = ObservationConfigure{} }
func (m *ObservationConfigure) String() string            { return proto1.CompactTextString(m) }
func (*ObservationConfigure) ProtoMessage()               {}
func (*ObservationConfigure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ObservationConfigure) GetType() ObservationType {
	if m != nil {
		return m.Type
	}
	return ObservationType_ObservationType_
}

func (m *ObservationConfigure) GetLogging() *LoggingConfigure {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *ObservationConfigure) GetTracing() *TracingConfigure {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *ObservationConfigure) GetMetrics() []*MetricsConfigure {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Configure struct {
	Reactions    map[string]*ReactionConfigure    `protobuf:"bytes,1,rep,name=reactions" json:"reactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Observations map[string]*ObservationConfigure `protobuf:"bytes,2,rep,name=observations" json:"observations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Configure) Reset()                    { *m = Configure{} }
func (m *Configure) String() string            { return proto1.CompactTextString(m) }
func (*Configure) ProtoMessage()               {}
func (*Configure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Configure) GetReactions() map[string]*ReactionConfigure {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *Configure) GetObservations() map[string]*ObservationConfigure {
	if m != nil {
		return m.Observations
	}
	return nil
}

// ******************* Environmental Profile *******************
type CPUProfile struct {
	Percent float64 `protobuf:"fixed64,1,opt,name=percent" json:"percent,omitempty"`
}

func (m *CPUProfile) Reset()                    { *m = CPUProfile{} }
func (m *CPUProfile) String() string            { return proto1.CompactTextString(m) }
func (*CPUProfile) ProtoMessage()               {}
func (*CPUProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CPUProfile) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type MemProfile struct {
	Total       uint64  `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Available   uint64  `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	Used        uint64  `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=usedPercent" json:"usedPercent,omitempty"`
	Free        uint64  `protobuf:"varint,5,opt,name=free" json:"free,omitempty"`
}

func (m *MemProfile) Reset()                    { *m = MemProfile{} }
func (m *MemProfile) String() string            { return proto1.CompactTextString(m) }
func (*MemProfile) ProtoMessage()               {}
func (*MemProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MemProfile) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MemProfile) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *MemProfile) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemProfile) GetUsedPercent() float64 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

func (m *MemProfile) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

type NetProfile struct {
	BytesSent   uint64 `protobuf:"varint,1,opt,name=bytesSent" json:"bytesSent,omitempty"`
	BytesRecv   uint64 `protobuf:"varint,2,opt,name=bytesRecv" json:"bytesRecv,omitempty"`
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packetsSent" json:"packetsSent,omitempty"`
	PacketsRecv uint64 `protobuf:"varint,4,opt,name=packetsRecv" json:"packetsRecv,omitempty"`
	Errin       uint64 `protobuf:"varint,5,opt,name=errin" json:"errin,omitempty"`
	Errout      uint64 `protobuf:"varint,6,opt,name=errout" json:"errout,omitempty"`
	Dropin      uint64 `protobuf:"varint,7,opt,name=dropin" json:"dropin,omitempty"`
	Dropout     uint64 `protobuf:"varint,8,opt,name=dropout" json:"dropout,omitempty"`
}

func (m *NetProfile) Reset()                    { *m = NetProfile{} }
func (m *NetProfile) String() string            { return proto1.CompactTextString(m) }
func (*NetProfile) ProtoMessage()               {}
func (*NetProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *NetProfile) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *NetProfile) GetBytesRecv() uint64 {
	if m != nil {
		return m.BytesRecv
	}
	return 0
}

func (m *NetProfile) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *NetProfile) GetPacketsRecv() uint64 {
	if m != nil {
		return m.PacketsRecv
	}
	return 0
}

func (m *NetProfile) GetErrin() uint64 {
	if m != nil {
		return m.Errin
	}
	return 0
}

func (m *NetProfile) GetErrout() uint64 {
	if m != nil {
		return m.Errout
	}
	return 0
}

func (m *NetProfile) GetDropin() uint64 {
	if m != nil {
		return m.Dropin
	}
	return 0
}

func (m *NetProfile) GetDropout() uint64 {
	if m != nil {
		return m.Dropout
	}
	return 0
}

type HardwareProfile struct {
	Cpu *CPUProfile `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Mem *MemProfile `protobuf:"bytes,2,opt,name=mem" json:"mem,omitempty"`
	Net *NetProfile `protobuf:"bytes,3,opt,name=net" json:"net,omitempty"`
}

func (m *HardwareProfile) Reset()                    { *m = HardwareProfile{} }
func (m *HardwareProfile) String() string            { return proto1.CompactTextString(m) }
func (*HardwareProfile) ProtoMessage()               {}
func (*HardwareProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *HardwareProfile) GetCpu() *CPUProfile {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *HardwareProfile) GetMem() *MemProfile {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *HardwareProfile) GetNet() *NetProfile {
	if m != nil {
		return m.Net
	}
	return nil
}

type LanguageGo struct {
	HeapSys       uint64  `protobuf:"varint,1,opt,name=HeapSys" json:"HeapSys,omitempty"`
	HeapAlloc     uint64  `protobuf:"varint,2,opt,name=HeapAlloc" json:"HeapAlloc,omitempty"`
	HeapInuse     uint64  `protobuf:"varint,3,opt,name=HeapInuse" json:"HeapInuse,omitempty"`
	StackSys      uint64  `protobuf:"varint,4,opt,name=StackSys" json:"StackSys,omitempty"`
	StackInuse    uint64  `protobuf:"varint,5,opt,name=StackInuse" json:"StackInuse,omitempty"`
	MSpanInuse    uint64  `protobuf:"varint,6,opt,name=MSpanInuse" json:"MSpanInuse,omitempty"`
	MSpanSys      uint64  `protobuf:"varint,7,opt,name=MSpanSys" json:"MSpanSys,omitempty"`
	MCacheInuse   uint64  `protobuf:"varint,8,opt,name=MCacheInuse" json:"MCacheInuse,omitempty"`
	MCacheSys     uint64  `protobuf:"varint,9,opt,name=MCacheSys" json:"MCacheSys,omitempty"`
	LastGC        uint64  `protobuf:"varint,101,opt,name=LastGC" json:"LastGC,omitempty"`
	NextGC        uint64  `protobuf:"varint,102,opt,name=NextGC" json:"NextGC,omitempty"`
	GCCPUFraction float64 `protobuf:"fixed64,103,opt,name=GCCPUFraction" json:"GCCPUFraction,omitempty"`
}

func (m *LanguageGo) Reset()                    { *m = LanguageGo{} }
func (m *LanguageGo) String() string            { return proto1.CompactTextString(m) }
func (*LanguageGo) ProtoMessage()               {}
func (*LanguageGo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *LanguageGo) GetHeapSys() uint64 {
	if m != nil {
		return m.HeapSys
	}
	return 0
}

func (m *LanguageGo) GetHeapAlloc() uint64 {
	if m != nil {
		return m.HeapAlloc
	}
	return 0
}

func (m *LanguageGo) GetHeapInuse() uint64 {
	if m != nil {
		return m.HeapInuse
	}
	return 0
}

func (m *LanguageGo) GetStackSys() uint64 {
	if m != nil {
		return m.StackSys
	}
	return 0
}

func (m *LanguageGo) GetStackInuse() uint64 {
	if m != nil {
		return m.StackInuse
	}
	return 0
}

func (m *LanguageGo) GetMSpanInuse() uint64 {
	if m != nil {
		return m.MSpanInuse
	}
	return 0
}

func (m *LanguageGo) GetMSpanSys() uint64 {
	if m != nil {
		return m.MSpanSys
	}
	return 0
}

func (m *LanguageGo) GetMCacheInuse() uint64 {
	if m != nil {
		return m.MCacheInuse
	}
	return 0
}

func (m *LanguageGo) GetMCacheSys() uint64 {
	if m != nil {
		return m.MCacheSys
	}
	return 0
}

func (m *LanguageGo) GetLastGC() uint64 {
	if m != nil {
		return m.LastGC
	}
	return 0
}

func (m *LanguageGo) GetNextGC() uint64 {
	if m != nil {
		return m.NextGC
	}
	return 0
}

func (m *LanguageGo) GetGCCPUFraction() float64 {
	if m != nil {
		return m.GCCPUFraction
	}
	return 0
}

type LanguageJava struct {
}

func (m *LanguageJava) Reset()                    { *m = LanguageJava{} }
func (m *LanguageJava) String() string            { return proto1.CompactTextString(m) }
func (*LanguageJava) ProtoMessage()               {}
func (*LanguageJava) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type LanguageProfile struct {
	Type LanguageType `protobuf:"varint,1,opt,name=type,enum=context_bus.LanguageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Profile:
	//	*LanguageProfile_Go
	//	*LanguageProfile_Java
	Profile isLanguageProfile_Profile `protobuf_oneof:"Profile"`
}

func (m *LanguageProfile) Reset()                    { *m = LanguageProfile{} }
func (m *LanguageProfile) String() string            { return proto1.CompactTextString(m) }
func (*LanguageProfile) ProtoMessage()               {}
func (*LanguageProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type isLanguageProfile_Profile interface{ isLanguageProfile_Profile() }

type LanguageProfile_Go struct {
	Go *LanguageGo `protobuf:"bytes,2002,opt,name=go,oneof"`
}
type LanguageProfile_Java struct {
	Java *LanguageJava `protobuf:"bytes,2003,opt,name=java,oneof"`
}

func (*LanguageProfile_Go) isLanguageProfile_Profile()   {}
func (*LanguageProfile_Java) isLanguageProfile_Profile() {}

func (m *LanguageProfile) GetProfile() isLanguageProfile_Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *LanguageProfile) GetType() LanguageType {
	if m != nil {
		return m.Type
	}
	return LanguageType_LanguageType_
}

func (m *LanguageProfile) GetGo() *LanguageGo {
	if x, ok := m.GetProfile().(*LanguageProfile_Go); ok {
		return x.Go
	}
	return nil
}

func (m *LanguageProfile) GetJava() *LanguageJava {
	if x, ok := m.GetProfile().(*LanguageProfile_Java); ok {
		return x.Java
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LanguageProfile) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _LanguageProfile_OneofMarshaler, _LanguageProfile_OneofUnmarshaler, _LanguageProfile_OneofSizer, []interface{}{
		(*LanguageProfile_Go)(nil),
		(*LanguageProfile_Java)(nil),
	}
}

func _LanguageProfile_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*LanguageProfile)
	// Profile
	switch x := m.Profile.(type) {
	case *LanguageProfile_Go:
		b.EncodeVarint(2002<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Go); err != nil {
			return err
		}
	case *LanguageProfile_Java:
		b.EncodeVarint(2003<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Java); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LanguageProfile.Profile has unexpected type %T", x)
	}
	return nil
}

func _LanguageProfile_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*LanguageProfile)
	switch tag {
	case 2002: // Profile.go
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LanguageGo)
		err := b.DecodeMessage(msg)
		m.Profile = &LanguageProfile_Go{msg}
		return true, err
	case 2003: // Profile.java
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LanguageJava)
		err := b.DecodeMessage(msg)
		m.Profile = &LanguageProfile_Java{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LanguageProfile_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*LanguageProfile)
	// Profile
	switch x := m.Profile.(type) {
	case *LanguageProfile_Go:
		s := proto1.Size(x.Go)
		n += proto1.SizeVarint(2002<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *LanguageProfile_Java:
		s := proto1.Size(x.Java)
		n += proto1.SizeVarint(2003<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EnvironmentalProfile struct {
	Timestamp int64            `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Hardware  *HardwareProfile `protobuf:"bytes,2,opt,name=hardware" json:"hardware,omitempty"`
	Language  *LanguageProfile `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Prev      int64            `protobuf:"varint,101,opt,name=prev" json:"prev,omitempty"`
	Next      int64            `protobuf:"varint,102,opt,name=next" json:"next,omitempty"`
}

func (m *EnvironmentalProfile) Reset()                    { *m = EnvironmentalProfile{} }
func (m *EnvironmentalProfile) String() string            { return proto1.CompactTextString(m) }
func (*EnvironmentalProfile) ProtoMessage()               {}
func (*EnvironmentalProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EnvironmentalProfile) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EnvironmentalProfile) GetHardware() *HardwareProfile {
	if m != nil {
		return m.Hardware
	}
	return nil
}

func (m *EnvironmentalProfile) GetLanguage() *LanguageProfile {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *EnvironmentalProfile) GetPrev() int64 {
	if m != nil {
		return m.Prev
	}
	return 0
}

func (m *EnvironmentalProfile) GetNext() int64 {
	if m != nil {
		return m.Next
	}
	return 0
}

// ******************* Event Representation
type EventWhen struct {
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
}

func (m *EventWhen) Reset()                    { *m = EventWhen{} }
func (m *EventWhen) String() string            { return proto1.CompactTextString(m) }
func (*EventWhen) ProtoMessage()               {}
func (*EventWhen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *EventWhen) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type AttributeValue struct {
	Type   AttributeValueType `protobuf:"varint,1,opt,name=type,enum=context_bus.AttributeValueType" json:"type,omitempty"`
	Str    string             `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
	Struct *Attributes        `protobuf:"bytes,3,opt,name=struct" json:"struct,omitempty"`
}

func (m *AttributeValue) Reset()                    { *m = AttributeValue{} }
func (m *AttributeValue) String() string            { return proto1.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()               {}
func (*AttributeValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AttributeValue) GetType() AttributeValueType {
	if m != nil {
		return m.Type
	}
	return AttributeValueType_AttributeValueType_
}

func (m *AttributeValue) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *AttributeValue) GetStruct() *Attributes {
	if m != nil {
		return m.Struct
	}
	return nil
}

type Attributes struct {
	Attrs map[string]*AttributeValue `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Attributes) Reset()                    { *m = Attributes{} }
func (m *Attributes) String() string            { return proto1.CompactTextString(m) }
func (*Attributes) ProtoMessage()               {}
func (*Attributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Attributes) GetAttrs() map[string]*AttributeValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type CodeBaseInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	File string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Line int64  `protobuf:"varint,3,opt,name=line" json:"line,omitempty"`
}

func (m *CodeBaseInfo) Reset()                    { *m = CodeBaseInfo{} }
func (m *CodeBaseInfo) String() string            { return proto1.CompactTextString(m) }
func (*CodeBaseInfo) ProtoMessage()               {}
func (*CodeBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CodeBaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CodeBaseInfo) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CodeBaseInfo) GetLine() int64 {
	if m != nil {
		return m.Line
	}
	return 0
}

type EventWhere struct {
	Attrs      *Attributes `protobuf:"bytes,1,opt,name=attrs" json:"attrs,omitempty"`
	Stacktrace string      `protobuf:"bytes,2,opt,name=stacktrace" json:"stacktrace,omitempty"`
}

func (m *EventWhere) Reset()                    { *m = EventWhere{} }
func (m *EventWhere) String() string            { return proto1.CompactTextString(m) }
func (*EventWhere) ProtoMessage()               {}
func (*EventWhere) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *EventWhere) GetAttrs() *Attributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *EventWhere) GetStacktrace() string {
	if m != nil {
		return m.Stacktrace
	}
	return ""
}

type EventRecorder struct {
	Type EventRecorderType `protobuf:"varint,1,opt,name=type,enum=context_bus.EventRecorderType" json:"type,omitempty"`
	Name string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EventRecorder) Reset()                    { *m = EventRecorder{} }
func (m *EventRecorder) String() string            { return proto1.CompactTextString(m) }
func (*EventRecorder) ProtoMessage()               {}
func (*EventRecorder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *EventRecorder) GetType() EventRecorderType {
	if m != nil {
		return m.Type
	}
	return EventRecorderType_EventRecorderType_
}

func (m *EventRecorder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EventMessage struct {
	Attrs   *Attributes `protobuf:"bytes,1,opt,name=attrs" json:"attrs,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Paths   []*Path     `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
}

func (m *EventMessage) Reset()                    { *m = EventMessage{} }
func (m *EventMessage) String() string            { return proto1.CompactTextString(m) }
func (*EventMessage) ProtoMessage()               {}
func (*EventMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *EventMessage) GetAttrs() *Attributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *EventMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventMessage) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type LibrariesMessage struct {
	Libraries map[string]*EventMessage `protobuf:"bytes,1,rep,name=libraries" json:"libraries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LibrariesMessage) Reset()                    { *m = LibrariesMessage{} }
func (m *LibrariesMessage) String() string            { return proto1.CompactTextString(m) }
func (*LibrariesMessage) ProtoMessage()               {}
func (*LibrariesMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *LibrariesMessage) GetLibraries() map[string]*EventMessage {
	if m != nil {
		return m.Libraries
	}
	return nil
}

type EventWhat struct {
	Application *EventMessage     `protobuf:"bytes,1,opt,name=application" json:"application,omitempty"`
	Libraries   *LibrariesMessage `protobuf:"bytes,2,opt,name=libraries" json:"libraries,omitempty"`
}

func (m *EventWhat) Reset()                    { *m = EventWhat{} }
func (m *EventWhat) String() string            { return proto1.CompactTextString(m) }
func (*EventWhat) ProtoMessage()               {}
func (*EventWhat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *EventWhat) GetApplication() *EventMessage {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *EventWhat) GetLibraries() *LibrariesMessage {
	if m != nil {
		return m.Libraries
	}
	return nil
}

type EventRepresentation struct {
	When     *EventWhen     `protobuf:"bytes,1,opt,name=when" json:"when,omitempty"`
	Where    *EventWhere    `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	Recorder *EventRecorder `protobuf:"bytes,3,opt,name=recorder" json:"recorder,omitempty"`
	What     *EventWhat     `protobuf:"bytes,4,opt,name=what" json:"what,omitempty"`
}

func (m *EventRepresentation) Reset()                    { *m = EventRepresentation{} }
func (m *EventRepresentation) String() string            { return proto1.CompactTextString(m) }
func (*EventRepresentation) ProtoMessage()               {}
func (*EventRepresentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *EventRepresentation) GetWhen() *EventWhen {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *EventRepresentation) GetWhere() *EventWhere {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *EventRepresentation) GetRecorder() *EventRecorder {
	if m != nil {
		return m.Recorder
	}
	return nil
}

func (m *EventRepresentation) GetWhat() *EventWhat {
	if m != nil {
		return m.What
	}
	return nil
}

// ******************* Event Metadata
type ParentChildPointers struct {
	Parent   uint64   `protobuf:"varint,1,opt,name=parent" json:"parent,omitempty"`
	Children []uint64 `protobuf:"varint,2,rep,packed,name=children" json:"children,omitempty"`
}

func (m *ParentChildPointers) Reset()                    { *m = ParentChildPointers{} }
func (m *ParentChildPointers) String() string            { return proto1.CompactTextString(m) }
func (*ParentChildPointers) ProtoMessage()               {}
func (*ParentChildPointers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ParentChildPointers) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *ParentChildPointers) GetChildren() []uint64 {
	if m != nil {
		return m.Children
	}
	return nil
}

type SpanMetadata struct {
	Sampled     bool              `protobuf:"varint,1,opt,name=sampled" json:"sampled,omitempty"`
	TraceIdHigh uint64            `protobuf:"varint,2,opt,name=trace_id_high,json=traceIdHigh" json:"trace_id_high,omitempty"`
	TraceIdLow  uint64            `protobuf:"varint,3,opt,name=trace_id_low,json=traceIdLow" json:"trace_id_low,omitempty"`
	SpanId      uint64            `protobuf:"varint,4,opt,name=span_id,json=spanId" json:"span_id,omitempty"`
	ParentId    uint64            `protobuf:"varint,5,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Baggage     map[string]string `protobuf:"bytes,6,rep,name=baggage" json:"baggage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SpanMetadata) Reset()                    { *m = SpanMetadata{} }
func (m *SpanMetadata) String() string            { return proto1.CompactTextString(m) }
func (*SpanMetadata) ProtoMessage()               {}
func (*SpanMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *SpanMetadata) GetSampled() bool {
	if m != nil {
		return m.Sampled
	}
	return false
}

func (m *SpanMetadata) GetTraceIdHigh() uint64 {
	if m != nil {
		return m.TraceIdHigh
	}
	return 0
}

func (m *SpanMetadata) GetTraceIdLow() uint64 {
	if m != nil {
		return m.TraceIdLow
	}
	return 0
}

func (m *SpanMetadata) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *SpanMetadata) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *SpanMetadata) GetBaggage() map[string]string {
	if m != nil {
		return m.Baggage
	}
	return nil
}

type EventMetadata struct {
	ReqId uint64               `protobuf:"varint,1,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	EveId uint64               `protobuf:"varint,2,opt,name=eve_id,json=eveId" json:"eve_id,omitempty"`
	Pcp   *ParentChildPointers `protobuf:"bytes,11,opt,name=pcp" json:"pcp,omitempty"`
	Esp   int64                `protobuf:"varint,12,opt,name=esp" json:"esp,omitempty"`
}

func (m *EventMetadata) Reset()                    { *m = EventMetadata{} }
func (m *EventMetadata) String() string            { return proto1.CompactTextString(m) }
func (*EventMetadata) ProtoMessage()               {}
func (*EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *EventMetadata) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *EventMetadata) GetEveId() uint64 {
	if m != nil {
		return m.EveId
	}
	return 0
}

func (m *EventMetadata) GetPcp() *ParentChildPointers {
	if m != nil {
		return m.Pcp
	}
	return nil
}

func (m *EventMetadata) GetEsp() int64 {
	if m != nil {
		return m.Esp
	}
	return 0
}

// ******************* Event Data
type EventData struct {
	Event    *EventRepresentation `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Metadata *EventMetadata       `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	// event pairs for tracing and metrics
	PrevEventData *EventData    `protobuf:"bytes,11,opt,name=prev_event_data,json=prevEventData" json:"prev_event_data,omitempty"`
	SpanMetadata  *SpanMetadata `protobuf:"bytes,12,opt,name=span_metadata,json=spanMetadata" json:"span_metadata,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto1.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *EventData) GetEvent() *EventRepresentation {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventData) GetMetadata() *EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventData) GetPrevEventData() *EventData {
	if m != nil {
		return m.PrevEventData
	}
	return nil
}

func (m *EventData) GetSpanMetadata() *SpanMetadata {
	if m != nil {
		return m.SpanMetadata
	}
	return nil
}

// Trace span, deprecated
type Record struct {
	Type        ActionType `protobuf:"varint,1,opt,name=type,enum=context_bus.ActionType" json:"type,omitempty"`
	Timestamp   int64      `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	MessageName string     `protobuf:"bytes,3,opt,name=message_name,json=messageName" json:"message_name,omitempty"`
	Uuid        string     `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	Service     string     `protobuf:"bytes,5,opt,name=service" json:"service,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto1.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *Record) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return ActionType_ActionType_
}

func (m *Record) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Record) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *Record) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Record) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// ******************* Prometheus *******************
type PrometheusOpts struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Namespace   string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Subsystem   string            `protobuf:"bytes,3,opt,name=subsystem" json:"subsystem,omitempty"`
	Name        string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Help        string            `protobuf:"bytes,5,opt,name=help" json:"help,omitempty"`
	ConstLabels map[string]string `protobuf:"bytes,6,rep,name=const_labels,json=constLabels" json:"const_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LabelNames  []string          `protobuf:"bytes,7,rep,name=label_names,json=labelNames" json:"label_names,omitempty"`
}

func (m *PrometheusOpts) Reset()                    { *m = PrometheusOpts{} }
func (m *PrometheusOpts) String() string            { return proto1.CompactTextString(m) }
func (*PrometheusOpts) ProtoMessage()               {}
func (*PrometheusOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *PrometheusOpts) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrometheusOpts) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrometheusOpts) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *PrometheusOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrometheusOpts) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *PrometheusOpts) GetConstLabels() map[string]string {
	if m != nil {
		return m.ConstLabels
	}
	return nil
}

func (m *PrometheusOpts) GetLabelNames() []string {
	if m != nil {
		return m.LabelNames
	}
	return nil
}

type PrometheusHistogramOpts struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Namespace   string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Subsystem   string            `protobuf:"bytes,3,opt,name=subsystem" json:"subsystem,omitempty"`
	Name        string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Help        string            `protobuf:"bytes,5,opt,name=help" json:"help,omitempty"`
	ConstLabels map[string]string `protobuf:"bytes,6,rep,name=const_labels,json=constLabels" json:"const_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Buckets     []float64         `protobuf:"fixed64,7,rep,packed,name=buckets" json:"buckets,omitempty"`
	LabelNames  []string          `protobuf:"bytes,8,rep,name=label_names,json=labelNames" json:"label_names,omitempty"`
}

func (m *PrometheusHistogramOpts) Reset()                    { *m = PrometheusHistogramOpts{} }
func (m *PrometheusHistogramOpts) String() string            { return proto1.CompactTextString(m) }
func (*PrometheusHistogramOpts) ProtoMessage()               {}
func (*PrometheusHistogramOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *PrometheusHistogramOpts) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrometheusHistogramOpts) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrometheusHistogramOpts) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *PrometheusHistogramOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrometheusHistogramOpts) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *PrometheusHistogramOpts) GetConstLabels() map[string]string {
	if m != nil {
		return m.ConstLabels
	}
	return nil
}

func (m *PrometheusHistogramOpts) GetBuckets() []float64 {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *PrometheusHistogramOpts) GetLabelNames() []string {
	if m != nil {
		return m.LabelNames
	}
	return nil
}

type PrometheusSummaryObjective struct {
	Id    int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key   float64 `protobuf:"fixed64,2,opt,name=key" json:"key,omitempty"`
	Value float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
}

func (m *PrometheusSummaryObjective) Reset()                    { *m = PrometheusSummaryObjective{} }
func (m *PrometheusSummaryObjective) String() string            { return proto1.CompactTextString(m) }
func (*PrometheusSummaryObjective) ProtoMessage()               {}
func (*PrometheusSummaryObjective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *PrometheusSummaryObjective) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrometheusSummaryObjective) GetKey() float64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *PrometheusSummaryObjective) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PrometheusSummaryOpts struct {
	Id          int64                         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Namespace   string                        `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Subsystem   string                        `protobuf:"bytes,3,opt,name=subsystem" json:"subsystem,omitempty"`
	Name        string                        `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Help        string                        `protobuf:"bytes,5,opt,name=help" json:"help,omitempty"`
	ConstLabels map[string]string             `protobuf:"bytes,6,rep,name=const_labels,json=constLabels" json:"const_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Objectives  []*PrometheusSummaryObjective `protobuf:"bytes,7,rep,name=objectives" json:"objectives,omitempty"`
	MaxAge      int64                         `protobuf:"varint,8,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	AgeBuckets  uint32                        `protobuf:"varint,9,opt,name=age_buckets,json=ageBuckets" json:"age_buckets,omitempty"`
	BufCap      uint32                        `protobuf:"varint,10,opt,name=buf_cap,json=bufCap" json:"buf_cap,omitempty"`
	LabelNames  []string                      `protobuf:"bytes,11,rep,name=label_names,json=labelNames" json:"label_names,omitempty"`
}

func (m *PrometheusSummaryOpts) Reset()                    { *m = PrometheusSummaryOpts{} }
func (m *PrometheusSummaryOpts) String() string            { return proto1.CompactTextString(m) }
func (*PrometheusSummaryOpts) ProtoMessage()               {}
func (*PrometheusSummaryOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *PrometheusSummaryOpts) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrometheusSummaryOpts) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrometheusSummaryOpts) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *PrometheusSummaryOpts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrometheusSummaryOpts) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *PrometheusSummaryOpts) GetConstLabels() map[string]string {
	if m != nil {
		return m.ConstLabels
	}
	return nil
}

func (m *PrometheusSummaryOpts) GetObjectives() []*PrometheusSummaryObjective {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *PrometheusSummaryOpts) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *PrometheusSummaryOpts) GetAgeBuckets() uint32 {
	if m != nil {
		return m.AgeBuckets
	}
	return 0
}

func (m *PrometheusSummaryOpts) GetBufCap() uint32 {
	if m != nil {
		return m.BufCap
	}
	return 0
}

func (m *PrometheusSummaryOpts) GetLabelNames() []string {
	if m != nil {
		return m.LabelNames
	}
	return nil
}

type PrometheusConfiguration struct {
	Counters   []*PrometheusOpts          `protobuf:"bytes,1,rep,name=counters" json:"counters,omitempty"`
	Gauges     []*PrometheusOpts          `protobuf:"bytes,2,rep,name=gauges" json:"gauges,omitempty"`
	Histograms []*PrometheusHistogramOpts `protobuf:"bytes,3,rep,name=histograms" json:"histograms,omitempty"`
	Summaries  []*PrometheusSummaryOpts   `protobuf:"bytes,4,rep,name=summaries" json:"summaries,omitempty"`
}

func (m *PrometheusConfiguration) Reset()                    { *m = PrometheusConfiguration{} }
func (m *PrometheusConfiguration) String() string            { return proto1.CompactTextString(m) }
func (*PrometheusConfiguration) ProtoMessage()               {}
func (*PrometheusConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *PrometheusConfiguration) GetCounters() []*PrometheusOpts {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *PrometheusConfiguration) GetGauges() []*PrometheusOpts {
	if m != nil {
		return m.Gauges
	}
	return nil
}

func (m *PrometheusConfiguration) GetHistograms() []*PrometheusHistogramOpts {
	if m != nil {
		return m.Histograms
	}
	return nil
}

func (m *PrometheusConfiguration) GetSummaries() []*PrometheusSummaryOpts {
	if m != nil {
		return m.Summaries
	}
	return nil
}

// ******************* Integration *******************
type LatencyMetric struct {
	Total   int64     `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Latency []float64 `protobuf:"fixed64,2,rep,packed,name=latency" json:"latency,omitempty"`
	Mean    float64   `protobuf:"fixed64,3,opt,name=mean" json:"mean,omitempty"`
	Median  float64   `protobuf:"fixed64,4,opt,name=median" json:"median,omitempty"`
	Min     float64   `protobuf:"fixed64,5,opt,name=min" json:"min,omitempty"`
	Max     float64   `protobuf:"fixed64,6,opt,name=max" json:"max,omitempty"`
}

func (m *LatencyMetric) Reset()                    { *m = LatencyMetric{} }
func (m *LatencyMetric) String() string            { return proto1.CompactTextString(m) }
func (*LatencyMetric) ProtoMessage()               {}
func (*LatencyMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *LatencyMetric) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *LatencyMetric) GetLatency() []float64 {
	if m != nil {
		return m.Latency
	}
	return nil
}

func (m *LatencyMetric) GetMean() float64 {
	if m != nil {
		return m.Mean
	}
	return 0
}

func (m *LatencyMetric) GetMedian() float64 {
	if m != nil {
		return m.Median
	}
	return 0
}

func (m *LatencyMetric) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *LatencyMetric) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type PerfMetric struct {
	Latency []*LatencyMetric `protobuf:"bytes,1,rep,name=latency" json:"latency,omitempty"`
}

func (m *PerfMetric) Reset()                    { *m = PerfMetric{} }
func (m *PerfMetric) String() string            { return proto1.CompactTextString(m) }
func (*PerfMetric) ProtoMessage()               {}
func (*PerfMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *PerfMetric) GetLatency() []*LatencyMetric {
	if m != nil {
		return m.Latency
	}
	return nil
}

type Payload struct {
	// workflow-level
	RequestId uint64                 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ConfigId  int64                  `protobuf:"varint,2,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	Snapshots *PrerequisiteSnapshots `protobuf:"bytes,3,opt,name=snapshots" json:"snapshots,omitempty"`
	Addition  *PrerequisiteSnapshots `protobuf:"bytes,4,opt,name=addition" json:"addition,omitempty"`
	// message-level
	Parent *SpanMetadata `protobuf:"bytes,11,opt,name=parent" json:"parent,omitempty"`
	MType  MessageType   `protobuf:"varint,12,opt,name=m_type,json=mType,enum=context_bus.MessageType" json:"m_type,omitempty"`
	Uuid   string        `protobuf:"bytes,13,opt,name=uuid" json:"uuid,omitempty"`
	Metric *PerfMetric   `protobuf:"bytes,21,opt,name=metric" json:"metric,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto1.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Payload) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *Payload) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Payload) GetSnapshots() *PrerequisiteSnapshots {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func (m *Payload) GetAddition() *PrerequisiteSnapshots {
	if m != nil {
		return m.Addition
	}
	return nil
}

func (m *Payload) GetParent() *SpanMetadata {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Payload) GetMType() MessageType {
	if m != nil {
		return m.MType
	}
	return MessageType_MessageType_
}

func (m *Payload) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Payload) GetMetric() *PerfMetric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto1.RegisterType((*ConditionMessage)(nil), "context_bus.ConditionMessage")
	proto1.RegisterType((*ConditionLogic)(nil), "context_bus.ConditionLogic")
	proto1.RegisterType((*ConditionNode)(nil), "context_bus.ConditionNode")
	proto1.RegisterType((*ConditionTree)(nil), "context_bus.ConditionTree")
	proto1.RegisterType((*PrerequisiteMessage)(nil), "context_bus.PrerequisiteMessage")
	proto1.RegisterType((*PrerequisiteEvent)(nil), "context_bus.PrerequisiteEvent")
	proto1.RegisterType((*PrerequisiteLogic)(nil), "context_bus.PrerequisiteLogic")
	proto1.RegisterType((*PrerequisiteNode)(nil), "context_bus.PrerequisiteNode")
	proto1.RegisterType((*PrerequisiteTree)(nil), "context_bus.PrerequisiteTree")
	proto1.RegisterType((*PrerequisiteSnapshot)(nil), "context_bus.PrerequisiteSnapshot")
	proto1.RegisterType((*PrerequisiteSnapshots)(nil), "context_bus.PrerequisiteSnapshots")
	proto1.RegisterType((*FaultDelayParam)(nil), "context_bus.FaultDelayParam")
	proto1.RegisterType((*TrafficBalanceParam)(nil), "context_bus.TrafficBalanceParam")
	proto1.RegisterType((*TrafficRoutingParam)(nil), "context_bus.TrafficRoutingParam")
	proto1.RegisterType((*ReactionConfigure)(nil), "context_bus.ReactionConfigure")
	proto1.RegisterType((*Path)(nil), "context_bus.Path")
	proto1.RegisterType((*AttributeConfigure)(nil), "context_bus.AttributeConfigure")
	proto1.RegisterType((*TimestampConfigure)(nil), "context_bus.TimestampConfigure")
	proto1.RegisterType((*StackTraceConfigure)(nil), "context_bus.StackTraceConfigure")
	proto1.RegisterType((*LoggingConfigure)(nil), "context_bus.LoggingConfigure")
	proto1.RegisterType((*TracingConfigure)(nil), "context_bus.TracingConfigure")
	proto1.RegisterType((*MetricsConfigure)(nil), "context_bus.MetricsConfigure")
	proto1.RegisterType((*ObservationConfigure)(nil), "context_bus.ObservationConfigure")
	proto1.RegisterType((*Configure)(nil), "context_bus.Configure")
	proto1.RegisterType((*CPUProfile)(nil), "context_bus.CPUProfile")
	proto1.RegisterType((*MemProfile)(nil), "context_bus.MemProfile")
	proto1.RegisterType((*NetProfile)(nil), "context_bus.NetProfile")
	proto1.RegisterType((*HardwareProfile)(nil), "context_bus.HardwareProfile")
	proto1.RegisterType((*LanguageGo)(nil), "context_bus.LanguageGo")
	proto1.RegisterType((*LanguageJava)(nil), "context_bus.LanguageJava")
	proto1.RegisterType((*LanguageProfile)(nil), "context_bus.LanguageProfile")
	proto1.RegisterType((*EnvironmentalProfile)(nil), "context_bus.EnvironmentalProfile")
	proto1.RegisterType((*EventWhen)(nil), "context_bus.EventWhen")
	proto1.RegisterType((*AttributeValue)(nil), "context_bus.AttributeValue")
	proto1.RegisterType((*Attributes)(nil), "context_bus.Attributes")
	proto1.RegisterType((*CodeBaseInfo)(nil), "context_bus.CodeBaseInfo")
	proto1.RegisterType((*EventWhere)(nil), "context_bus.EventWhere")
	proto1.RegisterType((*EventRecorder)(nil), "context_bus.EventRecorder")
	proto1.RegisterType((*EventMessage)(nil), "context_bus.EventMessage")
	proto1.RegisterType((*LibrariesMessage)(nil), "context_bus.LibrariesMessage")
	proto1.RegisterType((*EventWhat)(nil), "context_bus.EventWhat")
	proto1.RegisterType((*EventRepresentation)(nil), "context_bus.EventRepresentation")
	proto1.RegisterType((*ParentChildPointers)(nil), "context_bus.ParentChildPointers")
	proto1.RegisterType((*SpanMetadata)(nil), "context_bus.SpanMetadata")
	proto1.RegisterType((*EventMetadata)(nil), "context_bus.EventMetadata")
	proto1.RegisterType((*EventData)(nil), "context_bus.EventData")
	proto1.RegisterType((*Record)(nil), "context_bus.Record")
	proto1.RegisterType((*PrometheusOpts)(nil), "context_bus.PrometheusOpts")
	proto1.RegisterType((*PrometheusHistogramOpts)(nil), "context_bus.PrometheusHistogramOpts")
	proto1.RegisterType((*PrometheusSummaryObjective)(nil), "context_bus.PrometheusSummaryObjective")
	proto1.RegisterType((*PrometheusSummaryOpts)(nil), "context_bus.PrometheusSummaryOpts")
	proto1.RegisterType((*PrometheusConfiguration)(nil), "context_bus.PrometheusConfiguration")
	proto1.RegisterType((*LatencyMetric)(nil), "context_bus.LatencyMetric")
	proto1.RegisterType((*PerfMetric)(nil), "context_bus.PerfMetric")
	proto1.RegisterType((*Payload)(nil), "context_bus.Payload")
	proto1.RegisterEnum("context_bus.ConditionOperator", ConditionOperator_name, ConditionOperator_value)
	proto1.RegisterEnum("context_bus.ConditionType", ConditionType_name, ConditionType_value)
	proto1.RegisterEnum("context_bus.ConditionNodeType", ConditionNodeType_name, ConditionNodeType_value)
	proto1.RegisterEnum("context_bus.LogicType", LogicType_name, LogicType_value)
	proto1.RegisterEnum("context_bus.PrerequisiteNodeType", PrerequisiteNodeType_name, PrerequisiteNodeType_value)
	proto1.RegisterEnum("context_bus.ReactionType", ReactionType_name, ReactionType_value)
	proto1.RegisterEnum("context_bus.PathType", PathType_name, PathType_value)
	proto1.RegisterEnum("context_bus.LogOutType", LogOutType_name, LogOutType_value)
	proto1.RegisterEnum("context_bus.MetricType", MetricType_name, MetricType_value)
	proto1.RegisterEnum("context_bus.ObservationType", ObservationType_name, ObservationType_value)
	proto1.RegisterEnum("context_bus.LanguageType", LanguageType_name, LanguageType_value)
	proto1.RegisterEnum("context_bus.AttributeValueType", AttributeValueType_name, AttributeValueType_value)
	proto1.RegisterEnum("context_bus.EventRecorderType", EventRecorderType_name, EventRecorderType_value)
	proto1.RegisterEnum("context_bus.MessageType", MessageType_name, MessageType_value)
	proto1.RegisterEnum("context_bus.ActionType", ActionType_name, ActionType_value)
}

func init() { proto1.RegisterFile("context_bus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3a, 0x4d, 0x6f, 0x1c, 0xc9,
	0x75, 0xea, 0x9e, 0x0f, 0xce, 0xbc, 0xe1, 0x47, 0xab, 0x44, 0x4a, 0xb3, 0xd4, 0x77, 0xc3, 0x5e,
	0x6b, 0x99, 0xb5, 0xd6, 0x2b, 0xed, 0x5a, 0x8b, 0x75, 0xb2, 0x96, 0x48, 0x71, 0x45, 0x2a, 0x94,
	0x48, 0x37, 0xb9, 0xde, 0x20, 0x6b, 0x60, 0x50, 0x9c, 0x2e, 0xce, 0xb4, 0x35, 0xd3, 0xdd, 0xdb,
	0x5d, 0x33, 0x12, 0x73, 0x08, 0x02, 0xe4, 0x03, 0x4e, 0x2e, 0x06, 0x72, 0xcb, 0x21, 0x97, 0x20,
	0x97, 0x9c, 0x72, 0x8a, 0x73, 0xcd, 0x35, 0xc8, 0x25, 0x48, 0xf2, 0x03, 0x9c, 0xdc, 0x12, 0xe4,
	0x60, 0x20, 0xc8, 0x29, 0x97, 0xe0, 0xd5, 0x47, 0x77, 0xd5, 0x4c, 0x93, 0xf4, 0x26, 0x36, 0x7c,
	0x9a, 0x7a, 0xaf, 0xdf, 0x7b, 0xf5, 0xea, 0xbd, 0x57, 0xf5, 0x5e, 0xbd, 0x1a, 0xb8, 0xdc, 0x4f,
	0x62, 0xce, 0xde, 0xf0, 0xde, 0xf1, 0x24, 0xbf, 0x9f, 0x66, 0x09, 0x4f, 0x48, 0xc7, 0x40, 0xf9,
	0x3f, 0x72, 0xc0, 0xdb, 0x4a, 0xe2, 0x30, 0xe2, 0x51, 0x12, 0xbf, 0x60, 0x79, 0x4e, 0x07, 0x8c,
	0xdc, 0x87, 0x3a, 0x3f, 0x4d, 0x59, 0xd7, 0xb9, 0xe3, 0xdc, 0x5b, 0x7e, 0xb0, 0x7e, 0xdf, 0x94,
	0x51, 0x10, 0x1f, 0x9d, 0xa6, 0x2c, 0x10, 0x74, 0xe4, 0x3e, 0xb8, 0x49, 0xda, 0x75, 0x05, 0xf5,
	0xad, 0x6a, 0xea, 0xfd, 0x94, 0x65, 0x94, 0x27, 0x59, 0xe0, 0x26, 0x29, 0x59, 0x85, 0xc6, 0x94,
	0x8e, 0x26, 0xac, 0x5b, 0xbb, 0xe3, 0xdc, 0xab, 0x05, 0x12, 0xf0, 0x87, 0xb0, 0x5c, 0x90, 0xef,
	0x25, 0x83, 0xa8, 0x4f, 0x36, 0x2c, 0x3d, 0xae, 0x5a, 0x92, 0x05, 0x85, 0xa1, 0xc3, 0x55, 0x68,
	0xa6, 0x34, 0x63, 0x31, 0xef, 0x86, 0x42, 0xa8, 0x82, 0x08, 0x81, 0xfa, 0x28, 0xca, 0x79, 0x97,
	0xdd, 0xa9, 0xdd, 0xab, 0x05, 0x62, 0xec, 0xff, 0xb5, 0x03, 0x4b, 0xc5, 0x54, 0x2f, 0x93, 0x90,
	0x91, 0x07, 0x6a, 0xa6, 0x73, 0xd7, 0x80, 0x94, 0xc6, 0x8c, 0x8f, 0x60, 0x61, 0x2c, 0x0d, 0x26,
	0xd6, 0xd1, 0x79, 0x70, 0xb3, 0x9a, 0x4d, 0x59, 0x35, 0xd0, 0xd4, 0xe4, 0x7d, 0x68, 0x8c, 0x50,
	0xfb, 0x6e, 0x5d, 0xb0, 0x5d, 0xaf, 0x66, 0x13, 0x0b, 0x0c, 0x24, 0xa5, 0xff, 0x85, 0xa1, 0xf0,
	0x51, 0xc6, 0x18, 0xf9, 0x16, 0x34, 0xe2, 0x24, 0x64, 0x79, 0xd7, 0xb9, 0x53, 0xbb, 0xd7, 0x39,
	0xcb, 0x47, 0xa8, 0x71, 0x20, 0x09, 0x49, 0x17, 0x16, 0x46, 0x8c, 0x9e, 0xec, 0x3e, 0xcd, 0xbb,
	0xae, 0xb0, 0x85, 0x06, 0xfd, 0xdf, 0x81, 0x2b, 0x07, 0x19, 0xcb, 0xd8, 0x97, 0x93, 0x28, 0x8f,
	0x38, 0xd3, 0x51, 0x40, 0xa0, 0x1e, 0xd3, 0xb1, 0xb4, 0x7e, 0x3b, 0x10, 0x63, 0xf2, 0x08, 0xda,
	0xfd, 0x24, 0x0e, 0x7b, 0x3c, 0x63, 0xd2, 0x58, 0x67, 0x4e, 0x8d, 0x5a, 0x06, 0x2d, 0x24, 0x16,
	0xfa, 0x9e, 0xe1, 0x1e, 0xff, 0x09, 0x5c, 0x36, 0xe7, 0xde, 0x9e, 0x2a, 0x9f, 0xcd, 0xcd, 0x8c,
	0xea, 0x53, 0xce, 0xe2, 0xfe, 0xa9, 0x98, 0x17, 0xd5, 0x97, 0xa0, 0xff, 0xca, 0x16, 0xf1, 0xcb,
	0x0d, 0x9d, 0x3f, 0x76, 0xc1, 0x33, 0x67, 0x13, 0xd1, 0xb3, 0x0c, 0x6e, 0x14, 0x8a, 0xa9, 0x6a,
	0x81, 0x1b, 0x85, 0xe4, 0x43, 0x2b, 0x9a, 0xee, 0x5a, 0x93, 0xcf, 0x32, 0x1b, 0x7a, 0x7c, 0x3c,
	0x1b, 0x50, 0x77, 0xce, 0xe4, 0x9c, 0x8b, 0xa9, 0x5f, 0x87, 0x76, 0x9a, 0xb1, 0xa9, 0xb0, 0x9f,
	0x8a, 0xab, 0x5b, 0x67, 0x72, 0x0b, 0xaa, 0xa0, 0x64, 0x20, 0x1f, 0xe8, 0x88, 0x6c, 0x5c, 0xc0,
	0x69, 0x05, 0x25, 0xb5, 0x4d, 0x21, 0xfc, 0xfc, 0xd0, 0x8e, 0xcb, 0x9b, 0xe7, 0xae, 0xfd, 0xe2,
	0xd0, 0xfc, 0x04, 0x56, 0x4d, 0xa6, 0xc3, 0x98, 0xa6, 0xf9, 0x30, 0xe1, 0xe5, 0x09, 0xe2, 0x08,
	0x7a, 0x09, 0x10, 0x0f, 0x6a, 0xb4, 0xdf, 0x17, 0x66, 0x6f, 0x05, 0x38, 0xf4, 0xff, 0xde, 0x81,
	0xb5, 0x2a, 0x01, 0x39, 0xd9, 0x87, 0x76, 0xae, 0x01, 0xa5, 0xec, 0xfb, 0x67, 0x2a, 0x5b, 0xb0,
	0xdd, 0x2f, 0x46, 0xdb, 0x31, 0xcf, 0x4e, 0x83, 0x52, 0xc6, 0x7a, 0x0f, 0x96, 0xed, 0x8f, 0xa8,
	0xce, 0x2b, 0x76, 0xaa, 0xa2, 0x18, 0x87, 0xe4, 0x91, 0x56, 0x5b, 0x6e, 0x9d, 0xbb, 0x17, 0x4e,
	0xa8, 0x56, 0xf6, 0xb1, 0xfb, 0x91, 0xe3, 0xdf, 0x85, 0x95, 0x4f, 0xe9, 0x64, 0xc4, 0x9f, 0xb2,
	0x11, 0x3d, 0x3d, 0xa0, 0x19, 0x1d, 0x63, 0xe0, 0x8d, 0x73, 0x1d, 0x78, 0xe3, 0xdc, 0x5f, 0x83,
	0x2b, 0x47, 0x19, 0x3d, 0x39, 0x89, 0xfa, 0x9b, 0x74, 0x44, 0xe3, 0x3e, 0x13, 0x64, 0x06, 0x3a,
	0x48, 0x26, 0x3c, 0x8a, 0x07, 0x12, 0xfd, 0xaf, 0x2e, 0x5c, 0x0e, 0x18, 0xed, 0xe3, 0x76, 0xdd,
	0x4a, 0xe2, 0x93, 0x68, 0x30, 0xc9, 0x18, 0xf9, 0xa6, 0xb5, 0x73, 0xde, 0xb2, 0x54, 0xd4, 0xd4,
	0x46, 0xd0, 0x7e, 0x17, 0xa0, 0xd4, 0xaa, 0xfb, 0x4f, 0x2b, 0x62, 0x61, 0x37, 0x2c, 0xae, 0x19,
	0xad, 0x77, 0x2e, 0x05, 0x06, 0x0b, 0xf9, 0x4d, 0x58, 0xb6, 0x75, 0xee, 0xfe, 0x8d, 0x57, 0x11,
	0xfd, 0x15, 0xeb, 0xda, 0xb9, 0x14, 0xcc, 0xb0, 0x1a, 0xc2, 0xd4, 0x4a, 0xbb, 0x3f, 0x39, 0x47,
	0x98, 0x69, 0x0d, 0x43, 0x98, 0x42, 0x93, 0x8f, 0xa0, 0x95, 0x66, 0x4c, 0x9e, 0x75, 0x55, 0x27,
	0xfc, 0x6c, 0xf0, 0x07, 0x0b, 0x69, 0x26, 0x06, 0x9b, 0x2d, 0x71, 0xa2, 0xd0, 0x71, 0xee, 0x6f,
	0x43, 0xfd, 0x80, 0xf2, 0x21, 0x79, 0xc7, 0xb2, 0xea, 0x9a, 0x2d, 0x87, 0xf2, 0xa1, 0x61, 0x51,
	0x02, 0xf5, 0x94, 0xf2, 0xa1, 0xd8, 0x0a, 0xed, 0x40, 0x8c, 0xfd, 0x7d, 0x20, 0x4f, 0x38, 0xcf,
	0xa2, 0xe3, 0x09, 0x67, 0xa5, 0xab, 0xaa, 0xce, 0xc9, 0xaf, 0x17, 0xdc, 0xa8, 0xf0, 0xe5, 0xb9,
	0x89, 0x94, 0xc0, 0x77, 0x81, 0x1c, 0x45, 0x63, 0x96, 0x73, 0x3a, 0x4e, 0x4b, 0x81, 0x57, 0xa1,
	0x79, 0x92, 0x64, 0x63, 0xca, 0x95, 0x48, 0x05, 0xf9, 0xdf, 0x84, 0x2b, 0x87, 0x9c, 0xf6, 0x5f,
	0x1d, 0x65, 0xb4, 0xcf, 0x2c, 0xf2, 0xfc, 0x75, 0xc4, 0xfb, 0x43, 0x41, 0xde, 0x0a, 0x14, 0xe4,
	0xff, 0xb7, 0x03, 0xde, 0x5e, 0x32, 0x18, 0x44, 0xf1, 0xa0, 0x24, 0xfe, 0x0d, 0x68, 0x73, 0x3d,
	0xa3, 0xa0, 0xef, 0x3c, 0xb8, 0x6d, 0x3b, 0x65, 0x4e, 0x9f, 0xa0, 0xe4, 0x20, 0x8f, 0x01, 0x72,
	0x54, 0x81, 0xa3, 0x0a, 0x6a, 0x75, 0xb6, 0x53, 0x2b, 0x34, 0x0c, 0x0c, 0x1e, 0xf2, 0x21, 0x34,
	0x28, 0xe7, 0x59, 0xde, 0xad, 0x89, 0xdd, 0x6e, 0x4f, 0x3e, 0x6f, 0xdd, 0x40, 0x52, 0x93, 0x77,
	0xa0, 0x96, 0x4c, 0xe4, 0x99, 0xba, 0xfc, 0xe0, 0xda, 0x6c, 0x22, 0xd9, 0x9f, 0x70, 0xe1, 0x3a,
	0xa4, 0xf1, 0xff, 0xcc, 0x05, 0x0f, 0x15, 0xb0, 0xd6, 0xbd, 0x0a, 0x8d, 0x9c, 0xd3, 0x8c, 0x2b,
	0x1b, 0x49, 0x00, 0xcf, 0x06, 0x16, 0x87, 0xfa, 0xa8, 0x62, 0x71, 0x48, 0xae, 0x43, 0x3b, 0x4f,
	0x69, 0xdc, 0x13, 0x1e, 0xad, 0x09, 0xf3, 0xb7, 0x10, 0xf1, 0x12, 0xbd, 0xfa, 0x36, 0xac, 0xe0,
	0x69, 0xdd, 0x63, 0x78, 0x5c, 0x4b, 0x92, 0xba, 0x20, 0x59, 0x2a, 0x0e, 0x71, 0x41, 0x57, 0xac,
	0xb1, 0xf1, 0x95, 0xd6, 0x68, 0x1b, 0xb7, 0xf9, 0x7f, 0x30, 0xee, 0x6d, 0xe8, 0xc8, 0xac, 0x29,
	0x95, 0xeb, 0x08, 0xe5, 0x40, 0xa2, 0x50, 0x33, 0xff, 0xef, 0x1c, 0xf0, 0x5e, 0x30, 0x9e, 0x45,
	0xfd, 0xbc, 0xb4, 0xcd, 0xaf, 0x59, 0xbb, 0xc2, 0x36, 0xae, 0x24, 0x36, 0xf6, 0xc5, 0x35, 0x58,
	0x48, 0x52, 0x9e, 0xf7, 0xa2, 0x50, 0x55, 0x00, 0x4d, 0x04, 0x77, 0xc3, 0x62, 0x1b, 0xd4, 0x8c,
	0x6d, 0x70, 0x5d, 0xe6, 0x43, 0xd3, 0x54, 0xb8, 0x99, 0xa7, 0xff, 0x0f, 0x2b, 0xf9, 0xff, 0xe5,
	0xc0, 0xea, 0xfe, 0x71, 0xce, 0xb2, 0x29, 0xb5, 0x8f, 0xcc, 0x6f, 0x59, 0xcb, 0xb0, 0x0f, 0x3f,
	0x83, 0xc1, 0xae, 0x1d, 0x47, 0x72, 0x83, 0xa8, 0x50, 0xbe, 0x39, 0x1b, 0x58, 0xd6, 0xe6, 0x09,
	0x34, 0x35, 0x32, 0x72, 0x19, 0x61, 0x95, 0x47, 0xd2, 0x6c, 0xf4, 0x05, 0x9a, 0x5a, 0x56, 0xab,
	0xc2, 0xfc, 0xdd, 0x7a, 0x45, 0x6a, 0x9e, 0x75, 0x4d, 0xa0, 0xa9, 0xfd, 0x9f, 0xba, 0xd0, 0x2e,
	0x97, 0xba, 0x05, 0xed, 0x4c, 0x25, 0x01, 0x9d, 0x36, 0xbf, 0x3e, 0x5b, 0x00, 0x4a, 0xd2, 0x22,
	0x59, 0xe8, 0x54, 0x59, 0xf0, 0x91, 0x3d, 0x58, 0x4c, 0x4a, 0xb3, 0xc8, 0xa4, 0xdf, 0x79, 0x70,
	0xef, 0x0c, 0x39, 0x86, 0x05, 0x95, 0x28, 0x8b, 0x7b, 0xfd, 0x07, 0xb0, 0x6c, 0x4f, 0x55, 0x91,
	0x78, 0x3f, 0xb0, 0x13, 0xef, 0xad, 0xca, 0xac, 0x66, 0x38, 0xbc, 0xc8, 0xba, 0xeb, 0xc7, 0x70,
	0x79, 0x4e, 0x81, 0xaf, 0x9a, 0xd9, 0xab, 0x82, 0xc6, 0xcc, 0xec, 0x6f, 0x03, 0x6c, 0x1d, 0x7c,
	0x76, 0x90, 0x25, 0x27, 0xd1, 0x48, 0x54, 0xba, 0x29, 0xcb, 0xfa, 0x58, 0xc8, 0xe1, 0x04, 0x4e,
	0xa0, 0x41, 0xff, 0x4f, 0x1c, 0x80, 0x17, 0x6c, 0xac, 0x09, 0x57, 0xa1, 0xc1, 0x13, 0x4e, 0x47,
	0x82, 0xac, 0x1e, 0x48, 0x80, 0xdc, 0x80, 0x36, 0x9d, 0xd2, 0x68, 0x44, 0x8f, 0x47, 0x52, 0x9b,
	0x7a, 0x50, 0x22, 0x70, 0xaf, 0x4c, 0x72, 0x16, 0x8a, 0xe0, 0xa9, 0x07, 0x62, 0x4c, 0xee, 0x40,
	0x07, 0x7f, 0x0f, 0xd4, 0xa4, 0x75, 0x31, 0xa9, 0x89, 0x42, 0xae, 0x13, 0xcc, 0x82, 0x0d, 0xc9,
	0x85, 0x63, 0xff, 0x3f, 0x1d, 0x80, 0x97, 0x8c, 0x6b, 0x65, 0x6e, 0x40, 0xfb, 0xf8, 0x94, 0xb3,
	0xfc, 0x50, 0xeb, 0x5d, 0x0f, 0x4a, 0x44, 0xf1, 0x35, 0x60, 0xfd, 0xa9, 0x56, 0xaa, 0x40, 0xa0,
	0x02, 0x29, 0xed, 0xbf, 0x62, 0x5c, 0x72, 0x4b, 0xdd, 0x4c, 0x94, 0x41, 0x21, 0x24, 0xd4, 0x2d,
	0x0a, 0x21, 0x63, 0x15, 0x1a, 0x2c, 0xcb, 0xa2, 0x58, 0xe9, 0x28, 0x01, 0xcc, 0x50, 0x2c, 0xcb,
	0xf0, 0xfc, 0x6e, 0x0a, 0xb4, 0x82, 0x10, 0x1f, 0x66, 0x49, 0x1a, 0xc5, 0xdd, 0x05, 0x89, 0x97,
	0x10, 0xda, 0x1e, 0x47, 0xc8, 0xd0, 0x12, 0x1f, 0x34, 0xe8, 0xff, 0xa9, 0x03, 0x2b, 0x3b, 0x34,
	0x0b, 0x5f, 0xd3, 0x8c, 0xe9, 0x35, 0xbf, 0x03, 0xb5, 0x7e, 0x3a, 0x51, 0xc9, 0xcc, 0x3e, 0xbd,
	0x4a, 0x7f, 0x06, 0x48, 0x83, 0xa4, 0x63, 0x36, 0x56, 0xd1, 0x31, 0x7b, 0xd0, 0x8d, 0x0b, 0xd2,
	0x31, 0x1b, 0x23, 0x69, 0xcc, 0xb8, 0xda, 0xde, 0x36, 0x69, 0x69, 0xef, 0x00, 0x69, 0xfc, 0x9f,
	0xb9, 0x00, 0x7b, 0x34, 0x1e, 0x4c, 0xe8, 0x80, 0x3d, 0x4b, 0x50, 0xfb, 0x1d, 0x46, 0xd3, 0xc3,
	0xd3, 0x5c, 0x79, 0x40, 0x83, 0x68, 0x7f, 0x1c, 0x3e, 0x19, 0x8d, 0x92, 0xbe, 0xb6, 0x7f, 0x81,
	0xd0, 0x5f, 0x77, 0xe3, 0x49, 0xce, 0x94, 0xf5, 0x4b, 0x04, 0x59, 0x87, 0x96, 0x38, 0xfd, 0x51,
	0xac, 0x34, 0x7c, 0x01, 0x93, 0x5b, 0x00, 0x62, 0x2c, 0x59, 0xa5, 0xe9, 0x0d, 0x0c, 0x7e, 0x7f,
	0x71, 0x98, 0xd2, 0x58, 0x7e, 0x97, 0x3e, 0x30, 0x30, 0x28, 0x5b, 0x40, 0x28, 0x5b, 0x7a, 0xa2,
	0x80, 0xd1, 0xe7, 0x2f, 0xb6, 0x68, 0x7f, 0xc8, 0x24, 0xb3, 0xf4, 0x87, 0x89, 0x42, 0xbd, 0x25,
	0x88, 0xec, 0x6d, 0xa9, 0x77, 0x81, 0x40, 0x1f, 0xef, 0xd1, 0x9c, 0x3f, 0xdb, 0xea, 0x32, 0xe9,
	0x63, 0x09, 0x21, 0xfe, 0x25, 0x7b, 0x83, 0xf8, 0x13, 0x89, 0x97, 0x10, 0xf9, 0x1a, 0x2c, 0x3d,
	0xdb, 0xda, 0x3a, 0xf8, 0xec, 0xd3, 0x4c, 0x1e, 0x07, 0xdd, 0x81, 0xd8, 0x08, 0x36, 0xd2, 0x5f,
	0x86, 0x45, 0x6d, 0xf1, 0xe7, 0x74, 0x4a, 0xfd, 0xbf, 0x72, 0x60, 0x45, 0x23, 0x74, 0x5c, 0x9c,
	0x57, 0x42, 0x6b, 0x5a, 0x23, 0x19, 0x6c, 0x80, 0x3b, 0x48, 0x74, 0xe9, 0x7c, 0xad, 0x92, 0xfa,
	0x59, 0xb2, 0x73, 0x29, 0x70, 0x07, 0x09, 0xa6, 0x9a, 0x1f, 0xd2, 0x29, 0xed, 0xfe, 0xb3, 0xa4,
	0xae, 0x96, 0x8d, 0x8a, 0xed, 0x5c, 0x0a, 0x04, 0xe5, 0x66, 0x1b, 0x16, 0x94, 0x5e, 0xfe, 0x3f,
	0x3a, 0xb0, 0xba, 0x1d, 0x4f, 0xa3, 0x2c, 0x89, 0xc7, 0x2c, 0xe6, 0x74, 0x64, 0x6c, 0x5e, 0xbb,
	0x36, 0xab, 0x99, 0xa5, 0xd7, 0x47, 0xd0, 0x1a, 0xaa, 0xc8, 0x57, 0x01, 0x6c, 0xa7, 0xb8, 0x99,
	0x6d, 0x11, 0x14, 0xd4, 0xc8, 0x39, 0x52, 0x3a, 0xa9, 0x78, 0xbe, 0x51, 0xa9, 0x70, 0xc1, 0xa9,
	0xa9, 0x45, 0x11, 0x9c, 0xb1, 0xa9, 0x70, 0x5d, 0x2d, 0x10, 0x63, 0x91, 0xe7, 0xd9, 0x1b, 0x2e,
	0xdc, 0x56, 0x0b, 0xc4, 0xd8, 0xbf, 0x0d, 0x6d, 0x51, 0xfd, 0x7c, 0x3e, 0x64, 0x31, 0x12, 0xa0,
	0xd6, 0x6a, 0x05, 0x62, 0xec, 0xff, 0xc8, 0x81, 0xe5, 0x22, 0xa5, 0x7f, 0x5f, 0x5c, 0x13, 0x1f,
	0x5a, 0xee, 0x39, 0x23, 0xfb, 0x0b, 0x52, 0xc3, 0x49, 0x1e, 0xd4, 0x72, 0x9e, 0x89, 0xf5, 0xb7,
	0x03, 0x1c, 0x92, 0xf7, 0xa0, 0x99, 0xf3, 0x6c, 0xd2, 0xaf, 0xde, 0xaa, 0x85, 0xa0, 0x3c, 0x50,
	0x64, 0xfe, 0x9f, 0x3b, 0x00, 0x25, 0x9a, 0x7c, 0xa4, 0xab, 0x10, 0x99, 0x46, 0xfd, 0x33, 0xd8,
	0xc5, 0x50, 0x25, 0x3e, 0xc9, 0xb0, 0xfe, 0x99, 0x94, 0x73, 0x66, 0x32, 0x7a, 0xdf, 0x4e, 0x46,
	0xd7, 0xcf, 0x59, 0xa1, 0x99, 0x86, 0x9e, 0xc3, 0xe2, 0x56, 0x12, 0xb2, 0x4d, 0x9a, 0xb3, 0xdd,
	0xf8, 0x24, 0xa9, 0xbc, 0x5e, 0x60, 0x26, 0x88, 0x54, 0x62, 0x69, 0x07, 0x62, 0x2c, 0xfb, 0x24,
	0xb1, 0xee, 0xe6, 0x89, 0xb1, 0xff, 0x05, 0x80, 0xf6, 0x8b, 0xb8, 0x53, 0x16, 0x4b, 0x3d, 0xd7,
	0x52, 0xaa, 0x1c, 0xbd, 0x35, 0x57, 0xeb, 0xb7, 0xcd, 0x62, 0xd3, 0xff, 0x1c, 0x96, 0x64, 0x0b,
	0x83, 0xf5, 0x93, 0x2c, 0x64, 0x59, 0xd1, 0xbe, 0x73, 0x2a, 0xda, 0x77, 0x16, 0xa5, 0x7d, 0xcd,
	0x12, 0xab, 0x73, 0xcb, 0xd5, 0xf9, 0xbf, 0xe7, 0xc0, 0xa2, 0xa0, 0xd7, 0x3d, 0xb0, 0xaf, 0xa8,
	0x78, 0xb7, 0xec, 0xe0, 0x48, 0xb1, 0x45, 0x7f, 0xe6, 0x1b, 0xd0, 0xc0, 0x7b, 0x97, 0xbe, 0x7c,
	0x54, 0xdc, 0xcb, 0xe4, 0x77, 0xff, 0x6f, 0xf1, 0xee, 0x14, 0x1d, 0x67, 0x34, 0x8b, 0x58, 0xae,
	0xd5, 0x78, 0x0e, 0xed, 0x91, 0xc6, 0xa9, 0x70, 0x79, 0xd7, 0xde, 0x48, 0x33, 0x1c, 0x25, 0x42,
	0x15, 0x5f, 0x05, 0xfb, 0xfa, 0xe7, 0xb0, 0x6c, 0x7f, 0xac, 0x08, 0xa0, 0xf7, 0xec, 0x00, 0x7a,
	0x6b, 0xde, 0xa0, 0xba, 0x01, 0x65, 0x84, 0xcf, 0x1f, 0x3a, 0xc5, 0x5e, 0xa4, 0x9c, 0x7c, 0x07,
	0x3a, 0x34, 0x4d, 0x47, 0x51, 0x5f, 0x94, 0x3d, 0xca, 0x7e, 0xe7, 0x08, 0x32, 0xa9, 0xc9, 0x77,
	0xcc, 0xf5, 0x56, 0x16, 0xc8, 0x33, 0xeb, 0x35, 0x16, 0xe8, 0xff, 0x8b, 0x03, 0x57, 0x94, 0xd3,
	0xd3, 0x8c, 0xe5, 0x78, 0xd0, 0x09, 0xa1, 0x1b, 0x50, 0x7f, 0x3d, 0x64, 0x5a, 0x95, 0xab, 0xf3,
	0xaa, 0xe0, 0x19, 0x12, 0x08, 0x1a, 0xf4, 0xfb, 0x6b, 0x8c, 0xdc, 0xca, 0x84, 0x5d, 0x06, 0x76,
	0x20, 0xa9, 0xc8, 0xb7, 0xa1, 0x95, 0xa9, 0x08, 0x53, 0x87, 0xc1, 0xfa, 0xd9, 0x31, 0x18, 0x14,
	0xb4, 0x52, 0x25, 0xaa, 0x1b, 0x76, 0x95, 0x2a, 0x51, 0x1e, 0x08, 0x1a, 0x7f, 0x17, 0xae, 0x1c,
	0x88, 0xeb, 0xd4, 0xd6, 0x30, 0x1a, 0x85, 0x07, 0x49, 0x14, 0x73, 0x96, 0xe5, 0x46, 0xf3, 0x52,
	0xa6, 0x7c, 0xdd, 0xbc, 0x5c, 0x87, 0x56, 0x1f, 0x09, 0x33, 0x16, 0x8b, 0xfa, 0xba, 0x1e, 0x14,
	0xb0, 0xff, 0x17, 0x2e, 0x2c, 0x62, 0x96, 0x7d, 0xc1, 0x38, 0x0d, 0x29, 0xa7, 0x18, 0xb7, 0x39,
	0x1d, 0xa7, 0x23, 0x16, 0xaa, 0x5b, 0xaa, 0x06, 0x89, 0x0f, 0x4b, 0x62, 0xcf, 0xf5, 0xa2, 0xb0,
	0x37, 0x8c, 0x06, 0x43, 0x55, 0x3c, 0x74, 0x04, 0x72, 0x37, 0xdc, 0x89, 0x06, 0x43, 0x72, 0x07,
	0x16, 0x0b, 0x9a, 0x51, 0xf2, 0x5a, 0x55, 0x10, 0xa0, 0x48, 0xf6, 0x92, 0xd7, 0x78, 0x75, 0x13,
	0x77, 0xdb, 0x28, 0x54, 0x15, 0x44, 0x13, 0xc1, 0x5d, 0x71, 0xe9, 0x55, 0xd7, 0xc6, 0x28, 0x54,
	0xe5, 0x43, 0x4b, 0x22, 0x76, 0x43, 0xf2, 0x18, 0x16, 0x8e, 0xe9, 0x60, 0x80, 0xbb, 0xa9, 0x29,
	0x62, 0xfe, 0x6d, 0xfb, 0x4a, 0x6a, 0xac, 0xe0, 0xfe, 0xa6, 0x24, 0x94, 0xd1, 0xae, 0xd9, 0xd6,
	0x3f, 0x86, 0x45, 0xf3, 0x43, 0x45, 0xa4, 0xaf, 0x9a, 0x91, 0xde, 0x36, 0xc3, 0xf9, 0xf7, 0x1d,
	0x75, 0xca, 0x14, 0x56, 0x5a, 0x83, 0x66, 0xc6, 0xbe, 0xec, 0xa9, 0x56, 0x6f, 0x3d, 0x68, 0x64,
	0xec, 0xcb, 0xdd, 0x10, 0xd1, 0x6c, 0xca, 0xf4, 0xb5, 0x14, 0x4b, 0xcf, 0x29, 0xdb, 0x0d, 0xc9,
	0x03, 0xa8, 0xa5, 0xfd, 0x54, 0xdc, 0x84, 0xe7, 0x3a, 0xb9, 0xf3, 0x7e, 0x0c, 0x90, 0x58, 0x74,
	0x05, 0xf2, 0xb4, 0xbb, 0x28, 0x0e, 0x52, 0x1c, 0xfa, 0xff, 0xa3, 0x37, 0xd5, 0x53, 0xd4, 0xe0,
	0xdb, 0xd0, 0x10, 0x1d, 0x00, 0x15, 0xc3, 0x77, 0xaa, 0x82, 0xcc, 0x8c, 0xf9, 0x40, 0x92, 0x63,
	0x7c, 0x8e, 0xd5, 0x2a, 0x2a, 0xbb, 0xf6, 0xd6, 0x3a, 0x83, 0x82, 0x96, 0x7c, 0x62, 0xb5, 0x1d,
	0x04, 0x7b, 0xe7, 0xac, 0x50, 0x45, 0x05, 0x8d, 0x76, 0xc4, 0x53, 0xc9, 0xbf, 0x24, 0xfc, 0x5e,
	0x4c, 0xbe, 0x58, 0x71, 0x0c, 0x98, 0x7e, 0x0c, 0x16, 0x73, 0x03, 0xf2, 0xff, 0xd2, 0x81, 0xa6,
	0xdc, 0x36, 0xe7, 0xb6, 0x0a, 0x9e, 0xcc, 0x36, 0x25, 0xad, 0x7a, 0xc6, 0x9d, 0xad, 0x67, 0xee,
	0xc2, 0xa2, 0x3a, 0x96, 0xcd, 0x66, 0x4b, 0x47, 0xe1, 0x5e, 0xaa, 0x34, 0x37, 0x99, 0xa8, 0x68,
	0x6d, 0x07, 0x62, 0x2c, 0x36, 0x09, 0xcb, 0xa6, 0x51, 0x5f, 0x16, 0xba, 0xed, 0x40, 0x83, 0xfe,
	0x4f, 0x5c, 0x58, 0x3e, 0xc8, 0x92, 0x31, 0xe3, 0x43, 0x36, 0xc9, 0xf7, 0x53, 0x9e, 0xcf, 0x3d,
	0x09, 0xdc, 0x80, 0x36, 0xce, 0x95, 0xa7, 0x65, 0x46, 0x2b, 0x11, 0xf8, 0x35, 0x9f, 0x1c, 0xe7,
	0xa7, 0x39, 0x67, 0x63, 0xa5, 0x4e, 0x89, 0x28, 0x32, 0x55, 0xdd, 0xce, 0xc3, 0x43, 0x36, 0x4a,
	0x95, 0x26, 0x62, 0x4c, 0xf6, 0x61, 0xb1, 0x9f, 0xc4, 0x39, 0xef, 0x8d, 0xe8, 0x31, 0x1b, 0xe5,
	0x6a, 0xd3, 0xbc, 0x3b, 0xd3, 0xb3, 0x34, 0xd5, 0xc4, 0x5b, 0x76, 0xce, 0xf7, 0x04, 0xb9, 0xdc,
	0x3a, 0x9d, 0x7e, 0x89, 0x21, 0xb7, 0xa1, 0x23, 0x44, 0x09, 0x33, 0x61, 0x81, 0x5e, 0xc3, 0x44,
	0x2c, 0x50, 0x68, 0xa5, 0x7c, 0xfd, 0x13, 0xf1, 0x78, 0x68, 0x49, 0xf8, 0x4a, 0x7b, 0xec, 0xdf,
	0x5c, 0xb8, 0x56, 0x6a, 0xb4, 0x13, 0xe5, 0x3c, 0x19, 0x64, 0x74, 0xfc, 0x2b, 0xb3, 0xe0, 0x6f,
	0x55, 0x5a, 0xf0, 0xc3, 0x33, 0x2c, 0x68, 0xe9, 0x7b, 0x81, 0x29, 0xbb, 0xb0, 0x70, 0x3c, 0x11,
	0xb7, 0x55, 0x61, 0x46, 0x27, 0xd0, 0xe0, 0xac, 0x91, 0x5b, 0xbf, 0x70, 0x23, 0x1f, 0xc1, 0x7a,
	0xa9, 0xf3, 0xe1, 0x64, 0x3c, 0xa6, 0xd9, 0xe9, 0xfe, 0xf1, 0x0f, 0x59, 0x9f, 0x47, 0xd3, 0xf9,
	0xb7, 0x2b, 0x25, 0xd9, 0x15, 0x77, 0x1f, 0x5b, 0x72, 0x4d, 0xe0, 0xd4, 0x6b, 0xed, 0x4f, 0x6b,
	0xb0, 0x36, 0x2f, 0xf6, 0x57, 0xe5, 0xb8, 0xef, 0x57, 0x3a, 0xee, 0xe1, 0x19, 0x8e, 0x33, 0xb4,
	0xbd, 0xc0, 0x6d, 0xcf, 0x00, 0x12, 0x6d, 0x2a, 0xe9, 0xb9, 0xce, 0x83, 0x6f, 0x5c, 0x20, 0x55,
	0xd3, 0x07, 0x06, 0x2b, 0x66, 0xc0, 0x31, 0x7d, 0xd3, 0xc3, 0x5c, 0xd6, 0x92, 0xcd, 0xcb, 0x31,
	0x7d, 0xf3, 0x64, 0x20, 0x1a, 0xa7, 0x78, 0x10, 0xe9, 0xe0, 0xc0, 0x5b, 0xec, 0x52, 0x00, 0x74,
	0xc0, 0x36, 0x55, 0x7c, 0x5c, 0xc3, 0xc8, 0x39, 0xe9, 0xf5, 0x69, 0xda, 0x05, 0xf1, 0xb1, 0x79,
	0x3c, 0x39, 0xd9, 0xa2, 0xe9, 0x6c, 0xe0, 0x74, 0x7e, 0xe1, 0x81, 0xf3, 0x63, 0x6b, 0x77, 0xea,
	0xce, 0x95, 0x2c, 0xa6, 0x1e, 0x41, 0xab, 0x9f, 0x4c, 0x44, 0xea, 0x52, 0x05, 0xe9, 0xf5, 0x73,
	0xce, 0x99, 0xa0, 0x20, 0x26, 0x0f, 0xa1, 0x39, 0xa0, 0x93, 0x01, 0xd3, 0x5d, 0xbf, 0x73, 0xd9,
	0x14, 0x29, 0x79, 0x0a, 0x30, 0xd4, 0x9b, 0x4d, 0x97, 0xd0, 0x5f, 0xfb, 0x79, 0x76, 0x65, 0x60,
	0xf0, 0x91, 0xc7, 0x18, 0x6a, 0xe8, 0x23, 0xac, 0x2a, 0xeb, 0x15, 0x97, 0xae, 0xca, 0x08, 0x09,
	0x4a, 0x26, 0xff, 0xc7, 0x0e, 0x2c, 0xed, 0xc9, 0x67, 0x67, 0xd9, 0x30, 0xb5, 0x7b, 0x70, 0x35,
	0xdd, 0x83, 0xb3, 0x1e, 0xab, 0xc5, 0x6e, 0x57, 0x20, 0x06, 0xef, 0x98, 0xd1, 0x58, 0xed, 0x25,
	0x31, 0xc6, 0x12, 0x6e, 0xcc, 0xc2, 0x88, 0xc6, 0xaa, 0xf5, 0xa6, 0x20, 0xf4, 0xd5, 0x58, 0x35,
	0xb4, 0x9c, 0x00, 0x87, 0x02, 0x43, 0xdf, 0x88, 0x3e, 0x0a, 0x62, 0xe8, 0x1b, 0x7f, 0x13, 0xe0,
	0x80, 0x65, 0x27, 0x4a, 0x9b, 0x0f, 0xca, 0x79, 0xab, 0xfe, 0x17, 0x60, 0xa9, 0x5e, 0x3e, 0xa0,
	0xff, 0xcc, 0x85, 0x85, 0x03, 0x7a, 0x3a, 0x4a, 0x68, 0x48, 0x6e, 0x02, 0x64, 0xec, 0xcb, 0x09,
	0xcb, 0x79, 0x59, 0xe7, 0xb4, 0x15, 0x46, 0xd6, 0x6b, 0x7d, 0x11, 0x07, 0x65, 0x17, 0xbe, 0x25,
	0x11, 0xa2, 0x5e, 0x33, 0x9e, 0x54, 0x65, 0x19, 0xec, 0x5f, 0xfc, 0xa4, 0x6a, 0xbc, 0xa1, 0x92,
	0x4f, 0xa0, 0x45, 0x43, 0xf9, 0xff, 0x01, 0x55, 0x13, 0xff, 0x3c, 0x02, 0x0a, 0x1e, 0xf2, 0x7e,
	0x51, 0x0c, 0x77, 0x2e, 0x2a, 0x34, 0x74, 0x9d, 0xfc, 0x1e, 0x34, 0xc7, 0x3d, 0x51, 0x59, 0x2c,
	0x8a, 0xca, 0xa2, 0x3b, 0xd3, 0x9b, 0x13, 0x35, 0x81, 0x28, 0x2d, 0x1a, 0xe3, 0x23, 0x75, 0x6f,
	0x14, 0xa5, 0xc1, 0x92, 0x51, 0x1a, 0xa0, 0x10, 0x61, 0xd4, 0xee, 0x5a, 0xc5, 0x7d, 0xa1, 0x74,
	0x50, 0xa0, 0xc8, 0x36, 0xbe, 0x80, 0xcb, 0x73, 0x7f, 0x8d, 0x21, 0x57, 0x81, 0xcc, 0x21, 0x7b,
	0xde, 0x25, 0xd2, 0x04, 0x77, 0xef, 0xc8, 0x73, 0xf0, 0xf7, 0xd9, 0x91, 0xe7, 0x0a, 0x78, 0xdb,
	0xab, 0x09, 0x78, 0xdb, 0xab, 0xe3, 0xef, 0xf6, 0xf7, 0xbc, 0x06, 0xfe, 0xbe, 0xdc, 0xf6, 0x9a,
	0x1b, 0x8f, 0xcd, 0x3f, 0x8b, 0x48, 0x95, 0x97, 0x2d, 0x04, 0x0a, 0x5d, 0x06, 0x78, 0x39, 0x19,
	0xef, 0x9f, 0xec, 0xc6, 0xd3, 0xe4, 0x95, 0xe7, 0x90, 0x0e, 0x2c, 0xa8, 0xf0, 0xf0, 0xdc, 0x8d,
	0xcf, 0x0d, 0xf5, 0xf4, 0x9f, 0x14, 0x2c, 0xf5, 0x34, 0x12, 0x25, 0xad, 0x19, 0xc4, 0xca, 0x5e,
	0x3d, 0xcf, 0x21, 0x57, 0x60, 0xc5, 0xfe, 0x2f, 0x4b, 0xcf, 0x73, 0x37, 0xee, 0x43, 0xbb, 0xf8,
	0xf7, 0x05, 0xaa, 0x50, 0x00, 0x28, 0xa8, 0x05, 0xf5, 0x27, 0x71, 0x88, 0xbc, 0x0b, 0x50, 0xdb,
	0xcf, 0x90, 0xfe, 0x8f, 0x1c, 0xfb, 0x0f, 0x00, 0x85, 0x32, 0x6f, 0xd9, 0xef, 0xfa, 0xa6, 0x3e,
	0x5d, 0x9b, 0xc5, 0x50, 0xe9, 0x2a, 0x90, 0xb9, 0x3f, 0x33, 0xf4, 0x3c, 0x97, 0xdc, 0x85, 0x9b,
	0x26, 0xfe, 0xc9, 0x09, 0x67, 0x99, 0xd1, 0xb3, 0xef, 0x79, 0xb5, 0x8d, 0x7f, 0x70, 0x60, 0xd1,
	0x7c, 0xfd, 0x26, 0x97, 0x61, 0xc9, 0x84, 0x71, 0xe2, 0xab, 0x40, 0x34, 0x4a, 0xbc, 0x6f, 0x6f,
	0x65, 0x34, 0x1f, 0xca, 0x69, 0x2d, 0xbc, 0x78, 0xf7, 0xf6, 0x5c, 0x34, 0x9c, 0x8d, 0xcf, 0x92,
	0xd4, 0xab, 0x91, 0x75, 0xb8, 0x5a, 0x48, 0xb6, 0x5e, 0xb7, 0x3d, 0x56, 0xf1, 0x4d, 0x3d, 0x56,
	0x7b, 0x27, 0x64, 0x0d, 0x3c, 0xfd, 0xed, 0x20, 0x8b, 0x62, 0xbe, 0x97, 0x0c, 0xbc, 0x7f, 0x5f,
	0x20, 0xa4, 0x54, 0x74, 0x7b, 0x4c, 0xa3, 0x91, 0xf7, 0x1f, 0x0b, 0x1b, 0x8f, 0xa0, 0xa5, 0x1f,
	0x9d, 0xc9, 0x12, 0xb4, 0xf5, 0x18, 0x17, 0xb1, 0x02, 0x9d, 0x27, 0xe5, 0x4d, 0x5c, 0x05, 0x86,
	0xb8, 0x5b, 0x63, 0x60, 0x7c, 0x57, 0xb8, 0x4c, 0x3d, 0x7a, 0x22, 0x6d, 0x09, 0x21, 0x33, 0x40,
	0xf3, 0x90, 0x87, 0xc9, 0x84, 0x7b, 0x8e, 0x1a, 0xb3, 0x2c, 0xf3, 0x5c, 0xf4, 0xec, 0xa7, 0xd1,
	0x88, 0x79, 0xb5, 0x8d, 0xef, 0x01, 0x94, 0x0f, 0x7b, 0x28, 0xa0, 0x84, 0x50, 0x40, 0x07, 0x16,
	0xb6, 0x64, 0xa6, 0xf0, 0x1c, 0xd2, 0x86, 0xc6, 0x33, 0x3c, 0xff, 0x3d, 0x17, 0x95, 0x2c, 0xce,
	0x75, 0xaf, 0x86, 0x64, 0xea, 0x84, 0xf6, 0xea, 0x1b, 0xbf, 0x0b, 0x2b, 0x33, 0x8f, 0x6c, 0x64,
	0x15, 0xbc, 0x19, 0x94, 0x0a, 0x54, 0x03, 0x7b, 0x18, 0xc5, 0x83, 0x11, 0xf3, 0x9c, 0x19, 0xe2,
	0x43, 0x4e, 0x33, 0xee, 0xb9, 0x33, 0xd8, 0x5d, 0xa1, 0x52, 0x0d, 0x77, 0x92, 0x81, 0xdd, 0x8e,
	0x43, 0xaf, 0xbe, 0xb1, 0x59, 0x76, 0x84, 0x75, 0x64, 0x98, 0x30, 0xce, 0xdc, 0x86, 0xc6, 0x3e,
	0x1f, 0x8a, 0x45, 0x01, 0x34, 0x9f, 0x25, 0x23, 0x1a, 0x0f, 0xa4, 0x59, 0x9e, 0xd3, 0x29, 0xf5,
	0x6a, 0x1b, 0x3f, 0x30, 0xde, 0xf7, 0x8b, 0xce, 0x23, 0xb9, 0x06, 0x57, 0xe6, 0xb1, 0x6a, 0x25,
	0xf6, 0x87, 0x43, 0x9e, 0xc9, 0x40, 0xb3, 0xd1, 0x08, 0x79, 0xee, 0xc6, 0x1f, 0x38, 0x70, 0x79,
	0xae, 0x0d, 0x86, 0xd4, 0x73, 0x48, 0x14, 0x7e, 0x1b, 0xae, 0x5b, 0xf8, 0x43, 0x79, 0xcb, 0xd9,
	0xa1, 0x71, 0x38, 0x12, 0x4b, 0x78, 0x0b, 0xd6, 0x2c, 0x82, 0x4f, 0x27, 0xb1, 0x08, 0x2f, 0xcf,
	0x25, 0xd7, 0xe1, 0x9a, 0x2d, 0x73, 0x18, 0x65, 0xe1, 0x01, 0xcd, 0xf8, 0xa9, 0x57, 0xdb, 0x78,
	0x8e, 0xde, 0x2e, 0xce, 0x53, 0xe2, 0xc1, 0xa2, 0x01, 0xe2, 0xcc, 0x57, 0x60, 0x45, 0xef, 0xd6,
	0x40, 0xa6, 0x1c, 0xe9, 0x9e, 0x12, 0x99, 0xa7, 0x49, 0x9c, 0x33, 0xcf, 0xdd, 0x78, 0x0c, 0x50,
	0xde, 0xfa, 0x44, 0xd0, 0xf6, 0x67, 0x4e, 0x37, 0x89, 0x38, 0x64, 0x71, 0xe8, 0x39, 0xe8, 0x13,
	0x09, 0x07, 0xac, 0xcf, 0xa2, 0x29, 0xf3, 0xdc, 0xcd, 0x85, 0xdf, 0x6e, 0x88, 0xff, 0x43, 0x1e,
	0x37, 0xc5, 0xcf, 0xc3, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xeb, 0x8c, 0xdc, 0x2b, 0x29,
	0x00, 0x00,
}
